
-- tables
-- Table: Additional_service
CREATE TABLE Additional_service (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    description text  NOT NULL,
    date date  NOT NULL,
    filfiller_id int  NOT NULL,
    service_id int  NOT NULL,
    status varchar(255)  NOT NULL,
    CONSTRAINT Additional_service_pk PRIMARY KEY (id)
);

-- Table: Attachment
CREATE TABLE Attachment (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    url varchar(255)  NOT NULL,
    additional_service_id int  NULL,
    visit_id int  NULL,
    CONSTRAINT Attachment_pk PRIMARY KEY (id)
);

-- Table: Doctor_Specialization
CREATE TABLE Doctor_Specialization (
    doctor_id int  NOT NULL,
    specialization_id int  NOT NULL,
    CONSTRAINT Doctor_Specialization_pk PRIMARY KEY (doctor_id,specialization_id)
);

-- Table: Facility
CREATE TABLE Facility (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    address varchar(255)  NOT NULL,
    city varchar(255)  NOT NULL,
    CONSTRAINT Facility_pk PRIMARY KEY (id)
);

-- Table: Feedback
CREATE TABLE Feedback (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    rating int  NOT NULL,
    text text  NULL,
    visit_id int  NOT NULL,
    CONSTRAINT Feedback_pk PRIMARY KEY (id)
);

-- Table: Free_day
CREATE TABLE Free_day (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id int  NOT NULL,
    date date  NOT NULL,
    CONSTRAINT Free_day_pk PRIMARY KEY (id)
);

-- Table: Medicine
CREATE TABLE Medicine (
    id varchar(50) NOT NULL,
    name varchar(500) NOT NULL,
    common_name varchar(500) NOT NULL,
    dosage varchar(100) NOT NULL,
    CONSTRAINT Medicine_pk PRIMARY KEY (id)
);

-- Table: Medicine_Prescription
CREATE TABLE Medicine_Prescription (
    medicine_id varchar(50) NOT NULL,
    prescription_id int NOT NULL,
    amount int NOT NULL,
    CONSTRAINT Medicine_Prescription_pk PRIMARY KEY (medicine_id, prescription_id)
);

-- Table: Notification
CREATE TABLE Notification (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    visit_id int  NULL,
    status varchar(255)  NOT NULL,
    additional_service_id int  NULL,
    CONSTRAINT Notification_pk PRIMARY KEY (id)
);

-- Table: Prescription
CREATE TABLE Prescription (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    access_code int  NOT NULL,
    visit_id int  NOT NULL,
    description varchar(255)  NOT NULL,
    date date  NOT NULL,
    pesel int  NULL,
    passport_number varchar(10)  NULL,
    status varchar(255)  NOT NULL,
    expiration_date date NULL,
    CONSTRAINT Prescription_pk PRIMARY KEY (id)
);

-- Table: Referral
CREATE TABLE Referral (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    visit_id int  NOT NULL,
    diagnosis text  NOT NULL,
    type varchar(255)  NOT NULL,
    expiration_date date  NOT NULL,
    CONSTRAINT Referral_pk PRIMARY KEY (id)
);

-- Table: Service
CREATE TABLE Service (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255)  NOT NULL,
    price decimal(6,2)  NOT NULL,
    type varchar(255)  NOT NULL,
    estimated_time int  NOT NULL,
    CONSTRAINT Service_pk PRIMARY KEY (id)
);

-- Table: Specialization
CREATE TABLE Specialization (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255)  NOT NULL,
    CONSTRAINT Specialization_pk PRIMARY KEY (id)
);

-- Table: Specialization_Service
CREATE TABLE Specialization_Service (
    service_id int  NOT NULL,
    specialization_id int  NOT NULL,
    CONSTRAINT Specialization_Service_pk PRIMARY KEY (service_id,specialization_id)
);

-- Table: Subscription
CREATE TABLE Subscription (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255)  NOT NULL,
    price decimal(6,2)  NOT NULL,
    CONSTRAINT Subscription_pk PRIMARY KEY (id)
);

-- Table: Subscription_Service
CREATE TABLE Subscription_Service (
    srvice_id int  NOT NULL,
    subscription_id int  NOT NULL,
    discount int  NOT NULL,
    CONSTRAINT Subscription_Service_pk PRIMARY KEY (srvice_id,subscription_id)
);

-- Table: Time_slot
CREATE TABLE Time_slot (
    id int  NOT NULL,
    doctor_id int  NOT NULL,
    visit_id int  NULL,
    start_time time  NOT NULL,
    end_time time  NOT NULL,
    date date  NOT NULL,
    is_busy boolean  NOT NULL,
    CONSTRAINT Time_slot_pk PRIMARY KEY (id)
);

-- Table: User
CREATE TABLE "User" (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(255)  NOT NULL,
    last_name varchar(255)  NOT NULL,
    pesel varchar(11) NULL,
    passport_number varchar(255)  NULL,
    email varchar(255)  NOT NULL,
    address varchar(255)  NULL,
    password varchar(255)  NOT NULL,
    phone_number varchar(255)  NULL,
    account_status varchar(255)  NOT NULL,
    birthdate date  NULL,
    pwz varchar(255)  NULL,
    role varchar(255)  NOT NULL,
    subscription_id int  NULL,
    CONSTRAINT User_pk PRIMARY KEY (id)
);

-- Table: Visit
CREATE TABLE Visit (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    status varchar(255)  NOT NULL,
    interview text  NULL,
    diagnosis text  NULL,
    recommendations text  NULL,
    koszt decimal(6,2)  NOT NULL,
    placowka_id int  NOT NULL,
    service_id int  NOT NULL,
    patient_information varchar(255)  NULL,
    patient_id int  NOT NULL,
    CONSTRAINT Visit_pk PRIMARY KEY (id)
);

-- Table: Worktime
CREATE TABLE Worktime (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id int  NOT NULL,
    day_of_week int  NOT NULL,
    start_time time  NOT NULL,
    end_time time  NOT NULL,
    CONSTRAINT Worktime_pk PRIMARY KEY (id)
);

-- Table: OTP
CREATE TABLE OTP (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email varchar(255) NOT NULL,
    otp varchar(10) NOT NULL,
    purpose varchar(20) NOT NULL,
    generated_at timestamp NOT NULL,
    expires_at timestamp NOT NULL,
    attempts int NOT NULL DEFAULT 0,
    used boolean NOT NULL DEFAULT false,
    CONSTRAINT OTP_pk PRIMARY KEY (id)
);

-- foreign keys
-- Reference: Additional_service_Fulfiller (table: Additional_service)
ALTER TABLE Additional_service ADD CONSTRAINT Additional_service_Fulfiller
    FOREIGN KEY (filfiller_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Attachment_Additional_service (table: Attachment)
ALTER TABLE Attachment ADD CONSTRAINT Attachment_Additional_service
    FOREIGN KEY (additional_service_id)
    REFERENCES Additional_service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Attachment_Visit (table: Attachment)
ALTER TABLE Attachment ADD CONSTRAINT Attachment_Visit
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Doctor_specialization_Specialization (table: Doctor_Specialization)
ALTER TABLE Doctor_Specialization ADD CONSTRAINT Doctor_specialization_Specialization
    FOREIGN KEY (specialization_id)
    REFERENCES Specialization (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Doctor_specialization_User (table: Doctor_Specialization)
ALTER TABLE Doctor_Specialization ADD CONSTRAINT Doctor_specialization_User
    FOREIGN KEY (doctor_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Free_day_User (table: Free_day)
ALTER TABLE Free_day ADD CONSTRAINT Free_day_User
    FOREIGN KEY (user_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Medicine_prescription_Medicine (table: Medicine_Prescription)
ALTER TABLE Medicine_Prescription ADD CONSTRAINT Medicine_prescription_Medicine
    FOREIGN KEY (medicine_id)
    REFERENCES Medicine (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Medicine_prescription_Prescription (table: Medicine_Prescription)
ALTER TABLE Medicine_Prescription ADD CONSTRAINT Medicine_prescription_Prescription
    FOREIGN KEY (prescription_id)
    REFERENCES Prescription (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Notification_Additional_service (table: Notification)
ALTER TABLE Notification ADD CONSTRAINT Notification_Additional_service
    FOREIGN KEY (additional_service_id)
    REFERENCES Additional_service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Patient_Subscription (table: User)
ALTER TABLE "User" ADD CONSTRAINT Patient_Subscription
    FOREIGN KEY (subscription_id)
    REFERENCES Subscription (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Prescription_Visit (table: Prescription)
ALTER TABLE Prescription ADD CONSTRAINT Prescription_Visit
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Service_Additional_service (table: Additional_service)
ALTER TABLE Additional_service ADD CONSTRAINT Service_Additional_service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Specialization_service_Service (table: Specialization_Service)
ALTER TABLE Specialization_Service ADD CONSTRAINT Specialization_service_Service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Specialization_service_Specialization (table: Specialization_Service)
ALTER TABLE Specialization_Service ADD CONSTRAINT Specialization_service_Specialization
    FOREIGN KEY (specialization_id)
    REFERENCES Specialization (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Subscription_service_Service (table: Subscription_Service)
ALTER TABLE Subscription_Service ADD CONSTRAINT Subscription_service_Service
    FOREIGN KEY (srvice_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Subscription_service_Subscription (table: Subscription_Service)
ALTER TABLE Subscription_Service ADD CONSTRAINT Subscription_service_Subscription
    FOREIGN KEY (subscription_id)
    REFERENCES Subscription (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Time_slot_User (table: Time_slot)
ALTER TABLE Time_slot ADD CONSTRAINT Time_slot_User
    FOREIGN KEY (doctor_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Time_slot_Visit (table: Time_slot)
ALTER TABLE Time_slot ADD CONSTRAINT Time_slot_Visit
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visist_Referral (table: Referral)
ALTER TABLE Referral ADD CONSTRAINT Visist_Referral
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Facility (table: Visit)
ALTER TABLE Visit ADD CONSTRAINT Visit_Facility
    FOREIGN KEY (placowka_id)
    REFERENCES Facility (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Feedback (table: Feedback)
ALTER TABLE Feedback ADD CONSTRAINT Visit_Feedback
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Notification (table: Notification)
ALTER TABLE Notification ADD CONSTRAINT Visit_Notification
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Patient (table: Visit)
ALTER TABLE Visit ADD CONSTRAINT Visit_Patient
    FOREIGN KEY (patient_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Service (table: Visit)
ALTER TABLE Visit ADD CONSTRAINT Visit_Service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Worktime_User (table: Worktime)
ALTER TABLE Worktime ADD CONSTRAINT Worktime_User
    FOREIGN KEY (user_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

CREATE OR REPLACE FUNCTION cleanup_otps()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM OTP
     WHERE expires_at < NOW() - INTERVAL '1 day'
        OR used = TRUE;

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION cleanup_pending_users()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM "User"
     WHERE account_status = 'PENDING';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;


-- End of file.

