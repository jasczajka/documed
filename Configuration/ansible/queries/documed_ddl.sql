
-- tables
-- Table: Additional_service
CREATE TABLE IF NOT EXISTS Additional_service (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    description text  NOT NULL,
    date date  NOT NULL,
    fulfiller_id int  NOT NULL,
    patient_id int NOT NULL,
    service_id int  NOT NULL,
    total_cost decimal(6,2)  NULL,
    CONSTRAINT Additional_service_pk PRIMARY KEY (id)
);

-- Table: Attachment
CREATE TABLE IF NOT EXISTS Attachment (
    id                     INT   NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    file_name              VARCHAR(512) NOT NULL,
    size_bytes             BIGINT NOT NULL,
    s3_key                 VARCHAR(512) NOT NULL,
    status varchar(255)  NOT NULL,
    visit_id               INT  NULL,
    additional_service_id  INT  NULL,
    CONSTRAINT Attachment_pk PRIMARY KEY (id)
);

-- Table: Doctor_Specialization
CREATE TABLE IF NOT EXISTS Doctor_Specialization (
    doctor_id int  NOT NULL,
    specialization_id int  NOT NULL,
    CONSTRAINT Doctor_Specialization_pk PRIMARY KEY (doctor_id,specialization_id)
);

-- Table: Facility
CREATE TABLE IF NOT EXISTS Facility (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    address varchar(255)  NOT NULL,
    city varchar(255)  NOT NULL,
    CONSTRAINT Facility_pk PRIMARY KEY (id)
);

-- Table: Feedback
CREATE TABLE IF NOT EXISTS Feedback (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    rating int  NOT NULL,
    text text  NULL,
    visit_id int  NOT NULL,
    CONSTRAINT Feedback_pk PRIMARY KEY (id)
);

-- Table: Free_days
CREATE TABLE IF NOT EXISTS Free_days (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id int  NOT NULL,
    start_date date  NOT NULL,
    end_date date  NOT NULL,
    CONSTRAINT Free_days_pk PRIMARY KEY (id)
);

-- Table: Medicine
CREATE TABLE IF NOT EXISTS Medicine (
    id varchar(50) NOT NULL,
    name varchar(500) NOT NULL,
    common_name varchar(500) NOT NULL,
    dosage varchar(100) NOT NULL,
    CONSTRAINT Medicine_pk PRIMARY KEY (id)
);

-- Table: Medicine_Prescription
CREATE TABLE IF NOT EXISTS Medicine_Prescription (
    medicine_id varchar(50) NOT NULL,
    prescription_id int NOT NULL,
    amount int NOT NULL,
    CONSTRAINT Medicine_Prescription_pk PRIMARY KEY (medicine_id, prescription_id)
);

-- Table: Notification
CREATE TABLE IF NOT EXISTS Notification (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    visit_id int  NULL,
    additional_service_id int  NULL,
    status varchar(255)  NOT NULL,
    type varchar(255) NOT NULL,
    sent_at timestamp NULL,
    CONSTRAINT Notification_pk PRIMARY KEY (id)
);

-- Table: Prescription
CREATE TABLE IF NOT EXISTS Prescription (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    access_code int  NOT NULL DEFAULT(floor(random() * 9000 + 1000))::int,
    visit_id int  NOT NULL,
    date date  NOT NULL DEFAULT current_date,
    status varchar(255)  NOT NULL DEFAULT 'NEW',
    expiration_date date NULL,
    CONSTRAINT Prescription_pk PRIMARY KEY (id)
);

-- Table: Referral
CREATE TABLE IF NOT EXISTS Referral (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    visit_id int  NOT NULL,
    diagnosis text  NOT NULL,
    type varchar(255)  NOT NULL,
    expiration_date date  NOT NULL,
    status varchar(255)  NOT NULL DEFAULT 'NEW',
    CONSTRAINT Referral_pk PRIMARY KEY (id)
);

-- Table: Service
CREATE TABLE IF NOT EXISTS Service (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255)  NOT NULL,
    price decimal(6,2)  NOT NULL,
    type varchar(255)  NOT NULL,
    estimated_time int  NOT NULL,
    CONSTRAINT Service_pk PRIMARY KEY (id)
);

-- Table: Specialization
CREATE TABLE IF NOT EXISTS Specialization (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255)  NOT NULL,
    CONSTRAINT Specialization_pk PRIMARY KEY (id)
);

-- Table: Specialization_Service
CREATE TABLE IF NOT EXISTS Specialization_Service (
    service_id int  NOT NULL,
    specialization_id int  NOT NULL,
    CONSTRAINT Specialization_Service_pk PRIMARY KEY (service_id,specialization_id)
);

-- Table: Subscription
CREATE TABLE IF NOT EXISTS Subscription (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255)  NOT NULL,
    price decimal(6,2)  NOT NULL,
    CONSTRAINT Subscription_pk PRIMARY KEY (id)
);

-- Table: Subscription_Service
CREATE TABLE IF NOT EXISTS Subscription_Service (
    service_id int  NOT NULL,
    subscription_id int  NOT NULL,
    discount int  NOT NULL,
    CONSTRAINT Subscription_Service_pk PRIMARY KEY (service_id,subscription_id)
);

-- Table: Time_slot
CREATE TABLE IF NOT EXISTS Time_slot (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    doctor_id int  NOT NULL,
    visit_id int  NULL,
    start_time time  NOT NULL,
    end_time time  NOT NULL,
    date date  NOT NULL,
    is_busy boolean  NOT NULL,
    facility_id int NOT NULL,
    CONSTRAINT Time_slot_pk PRIMARY KEY (id)
);

-- Table: User
CREATE TABLE IF NOT EXISTS "User" (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(255)  NOT NULL,
    last_name varchar(255)  NOT NULL,
    pesel varchar(11) NULL,
    passport_number varchar(255)  NULL,
    email varchar(255)  NOT NULL,
    address varchar(255)  NULL,
    password varchar(255)  NOT NULL,
    phone_number varchar(255)  NULL,
    account_status varchar(255)  NOT NULL,
    birthdate date  NULL,
    pwz varchar(255)  NULL,
    role varchar(255)  NOT NULL,
    subscription_id int  NULL,
    email_notifications BOOLEAN DEFAULT true,
    CONSTRAINT User_pk PRIMARY KEY (id)
);

-- Table: Visit
CREATE TABLE IF NOT EXISTS Visit (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    status varchar(255)  NOT NULL,
    interview text  NULL,
    diagnosis text  NULL,
    recommendations text  NULL,
    total_cost decimal(6,2)  NULL,
    facility_id int  NOT NULL,
    service_id int  NOT NULL,
    patient_information varchar(255)  NULL,
    patient_id int  NOT NULL,
    doctor_id int  NOT NULL,
    date DATE,
    start_time TIME,
    end_time TIME,
    CONSTRAINT Visit_pk PRIMARY KEY (id)
);

-- Table: Worktime
CREATE TABLE IF NOT EXISTS Worktime (
    id int  NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id int  NOT NULL,
    day_of_week int  NOT NULL,
    start_time time  NOT NULL,
    end_time time  NOT NULL,
    facility_id int NOT NULL,
    CONSTRAINT Worktime_pk PRIMARY KEY (id)
);

-- Table: OTP
CREATE TABLE IF NOT EXISTS OTP (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email varchar(255) NOT NULL,
    otp varchar(10) NOT NULL,
    purpose varchar(20) NOT NULL,
    generated_at timestamp NOT NULL,
    expires_at timestamp NOT NULL,
    attempts int NOT NULL DEFAULT 0,
    used boolean NOT NULL DEFAULT false,
    CONSTRAINT OTP_pk PRIMARY KEY (id)
);

-- foreign keys
-- Reference: Additional_service_Fulfiller (table: Additional_service)
ALTER TABLE Additional_service
DROP CONSTRAINT IF EXISTS Additional_service_Fulfiller;

ALTER TABLE Additional_service ADD CONSTRAINT Additional_service_Fulfiller
    FOREIGN KEY (fulfiller_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Additional_service_Patient (table: Additional_service)
ALTER TABLE Additional_service
DROP CONSTRAINT IF EXISTS Additional_service_Patient;

ALTER TABLE Additional_service ADD CONSTRAINT Additional_service_Patient
    FOREIGN KEY (patient_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Attachment_Additional_service (table: Attachment)
ALTER TABLE Attachment
DROP CONSTRAINT IF EXISTS Attachment_Additional_service;

ALTER TABLE Attachment ADD CONSTRAINT Attachment_Additional_service
    FOREIGN KEY (additional_service_id)
    REFERENCES Additional_service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Facility_Time_slot (table: Time_slot)
ALTER TABLE Time_slot
DROP CONSTRAINT IF EXISTS Facility_Time_slot;

ALTER TABLE Time_slot ADD CONSTRAINT Facility_Time_slot
    FOREIGN KEY (facility_id)
    REFERENCES Facility (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Facility_Worktime (table: Worktime)
ALTER TABLE Worktime
DROP CONSTRAINT IF EXISTS Facility_Worktime;

ALTER TABLE Worktime ADD CONSTRAINT Facility_Worktime
    FOREIGN KEY (facility_id)
    REFERENCES Facility (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Attachment_Visit (table: Attachment)
ALTER TABLE Attachment
DROP CONSTRAINT IF EXISTS Attachment_Visit;

ALTER TABLE Attachment ADD CONSTRAINT Attachment_Visit
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Doctor_specialization_Specialization (table: Doctor_Specialization)
ALTER TABLE Doctor_Specialization
DROP CONSTRAINT IF EXISTS Doctor_specialization_Specialization;

ALTER TABLE Doctor_Specialization ADD CONSTRAINT Doctor_specialization_Specialization
    FOREIGN KEY (specialization_id)
    REFERENCES Specialization (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Doctor_specialization_User (table: Doctor_Specialization)
ALTER TABLE Doctor_Specialization
DROP CONSTRAINT IF EXISTS Doctor_specialization_User;

ALTER TABLE Doctor_Specialization ADD CONSTRAINT Doctor_specialization_User
    FOREIGN KEY (doctor_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Free_days_User (table: Free_days)
ALTER TABLE Free_days
DROP CONSTRAINT IF EXISTS Free_days_User;

ALTER TABLE Free_days ADD CONSTRAINT Free_days_User
    FOREIGN KEY (user_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Medicine_prescription_Medicine (table: Medicine_Prescription)
ALTER TABLE Medicine_Prescription
DROP CONSTRAINT IF EXISTS Medicine_prescription_Medicine;

ALTER TABLE Medicine_Prescription ADD CONSTRAINT Medicine_prescription_Medicine
    FOREIGN KEY (medicine_id)
    REFERENCES Medicine (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Medicine_prescription_Prescription (table: Medicine_Prescription)
ALTER TABLE Medicine_Prescription
DROP CONSTRAINT IF EXISTS Medicine_prescription_Prescription;

ALTER TABLE Medicine_Prescription ADD CONSTRAINT Medicine_prescription_Prescription
    FOREIGN KEY (prescription_id)
    REFERENCES Prescription (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Notification_Additional_service (table: Notification)
ALTER TABLE Notification
DROP CONSTRAINT IF EXISTS Notification_Additional_service;

ALTER TABLE Notification ADD CONSTRAINT Notification_Additional_service
    FOREIGN KEY (additional_service_id)
    REFERENCES Additional_service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Patient_Subscription (table: User)
ALTER TABLE "User"
DROP CONSTRAINT IF EXISTS Patient_Subscription;

ALTER TABLE "User" ADD CONSTRAINT Patient_Subscription
    FOREIGN KEY (subscription_id)
    REFERENCES Subscription (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Prescription_Visit (table: Prescription)
ALTER TABLE Prescription
DROP CONSTRAINT IF EXISTS Prescription_Visit;

ALTER TABLE Prescription ADD CONSTRAINT Prescription_Visit
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Service_Additional_service (table: Additional_service)
ALTER TABLE Additional_service
DROP CONSTRAINT IF EXISTS Service_Additional_service;

ALTER TABLE Additional_service ADD CONSTRAINT Service_Additional_service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Specialization_service_Service (table: Specialization_Service)
ALTER TABLE Specialization_Service
DROP CONSTRAINT IF EXISTS Specialization_service_Service;

ALTER TABLE Specialization_Service ADD CONSTRAINT Specialization_service_Service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Specialization_service_Specialization (table: Specialization_Service)
ALTER TABLE Specialization_Service
DROP CONSTRAINT IF EXISTS Specialization_service_Specialization;

ALTER TABLE Specialization_Service ADD CONSTRAINT Specialization_service_Specialization
    FOREIGN KEY (specialization_id)
    REFERENCES Specialization (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Subscription_service_Service (table: Subscription_Service)
ALTER TABLE Subscription_Service
DROP CONSTRAINT IF EXISTS Subscription_service_Service;

ALTER TABLE Subscription_Service ADD CONSTRAINT Subscription_service_Service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Subscription_service_Subscription (table: Subscription_Service)
ALTER TABLE Subscription_Service
DROP CONSTRAINT IF EXISTS Subscription_service_Subscription;

ALTER TABLE Subscription_Service ADD CONSTRAINT Subscription_service_Subscription
    FOREIGN KEY (subscription_id)
    REFERENCES Subscription (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Time_slot_User (table: Time_slot)
ALTER TABLE Time_slot
DROP CONSTRAINT IF EXISTS Time_slot_User;

ALTER TABLE Time_slot ADD CONSTRAINT Time_slot_User
    FOREIGN KEY (doctor_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Time_slot_Visit (table: Time_slot)
ALTER TABLE Time_slot
DROP CONSTRAINT IF EXISTS Time_slot_Visit;

ALTER TABLE Time_slot ADD CONSTRAINT Time_slot_Visit
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visist_Referral (table: Referral)
ALTER TABLE Referral
DROP CONSTRAINT IF EXISTS Visit_Referral;

ALTER TABLE Referral ADD CONSTRAINT Visit_Referral
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Facility (table: Visit)
ALTER TABLE Visit
DROP CONSTRAINT IF EXISTS Visit_Facility;

ALTER TABLE Visit ADD CONSTRAINT Visit_Facility
    FOREIGN KEY (facility_id)
    REFERENCES Facility (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Feedback (table: Feedback)
ALTER TABLE Feedback
DROP CONSTRAINT IF EXISTS Visit_Feedback;

ALTER TABLE Feedback ADD CONSTRAINT Visit_Feedback
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Notification (table: Notification)
ALTER TABLE Notification
DROP CONSTRAINT IF EXISTS Visit_Notification;

ALTER TABLE Notification ADD CONSTRAINT Visit_Notification
    FOREIGN KEY (visit_id)
    REFERENCES Visit (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Patient (table: Visit)
ALTER TABLE Visit
DROP CONSTRAINT IF EXISTS Visit_Patient;

ALTER TABLE Visit ADD CONSTRAINT Visit_Patient
    FOREIGN KEY (patient_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Doctor (table: Visit)
ALTER TABLE Visit
DROP CONSTRAINT IF EXISTS Visit_Doctor;

ALTER TABLE Visit ADD CONSTRAINT Visit_Doctor
    FOREIGN KEY (doctor_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Visit_Service (table: Visit)
ALTER TABLE Visit
DROP CONSTRAINT IF EXISTS Visit_Service;

ALTER TABLE Visit ADD CONSTRAINT Visit_Service
    FOREIGN KEY (service_id)
    REFERENCES Service (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- Reference: Worktime_User (table: Worktime)
ALTER TABLE Worktime
DROP CONSTRAINT IF EXISTS Worktime_User;

ALTER TABLE Worktime ADD CONSTRAINT Worktime_User
    FOREIGN KEY (user_id)
    REFERENCES "User" (id)  
    NOT DEFERRABLE 
    INITIALLY IMMEDIATE
;

-- unique constraints
ALTER TABLE Worktime
DROP CONSTRAINT IF EXISTS worktime_unique;

ALTER TABLE worktime
ADD CONSTRAINT worktime_unique
UNIQUE (user_id, day_of_week);

ALTER TABLE Time_slot
DROP CONSTRAINT IF EXISTS unique_timeslot;

ALTER TABLE Time_slot
ADD CONSTRAINT unique_timeslot
UNIQUE (doctor_id, date, start_time, end_time);


ALTER TABLE Feedback
DROP CONSTRAINT IF EXISTS unique_feedback;

ALTER TABLE Feedback
ADD CONSTRAINT unique_feedback
UNIQUE (visit_id);

CREATE EXTENSION IF NOT EXISTS btree_gist;

ALTER TABLE Free_days
DROP CONSTRAINT IF EXISTS unique_free_days;

ALTER TABLE Free_days
ADD CONSTRAINT unique_free_days
EXCLUDE USING gist (
  user_id WITH =,
  daterange(start_date, end_date, '[]') WITH &&
);

ALTER TABLE Prescription
DROP CONSTRAINT IF EXISTS unique_prescription;

ALTER TABLE Prescription
ADD CONSTRAINT unique_prescription
UNIQUE (visit_id);


ALTER TABLE Service
DROP CONSTRAINT IF EXISTS unique_service;

ALTER TABLE Service
ADD CONSTRAINT unique_service
UNIQUE (name);


ALTER TABLE Specialization
DROP CONSTRAINT IF EXISTS unique_specialization;

ALTER TABLE Specialization
ADD CONSTRAINT unique_specialization
UNIQUE (name);


ALTER TABLE Subscription
DROP CONSTRAINT IF EXISTS unique_subscription;

ALTER TABLE Subscription
ADD CONSTRAINT unique_subscription
UNIQUE (name);


ALTER TABLE "User"
DROP CONSTRAINT IF EXISTS unique_user_pesel;

ALTER TABLE "User"
ADD CONSTRAINT unique_user_pesel
UNIQUE (pesel);


ALTER TABLE "User"
DROP CONSTRAINT IF EXISTS unique_user_passport_number;

ALTER TABLE "User"
ADD CONSTRAINT unique_user_passport_number
UNIQUE (passport_number);


ALTER TABLE "User"
DROP CONSTRAINT IF EXISTS unique_user_pwz;

ALTER TABLE "User"
ADD CONSTRAINT unique_user_pwz
UNIQUE (pwz);


ALTER TABLE "User"
DROP CONSTRAINT IF EXISTS unique_user_email;

ALTER TABLE "User"
ADD CONSTRAINT unique_user_email
UNIQUE (email);


-- Indexes


-- Visit table indexes

CREATE INDEX IF NOT EXISTS idx_visit_facility_id ON Visit(facility_id);
CREATE INDEX IF NOT EXISTS idx_visit_service_id ON Visit(service_id);
CREATE INDEX IF NOT EXISTS idx_visit_doctor_status ON Visit(doctor_id, status);
CREATE INDEX IF NOT EXISTS idx_visit_patient_status ON Visit(patient_id, status);
-- For findByPatientIdAndFacilityIdWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_visit_patient_facility_date ON visit(patient_id, facility_id, date DESC);
-- For findByPatientIdWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_visit_patient_date ON visit(patient_id, date DESC);
-- For findByDoctorIdAndFacilityIdWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_visit_doctor_facility_date ON visit(doctor_id, facility_id, date DESC);
-- For findAllWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_visit_date ON visit(date DESC);
-- For findPlannedWithDetailsByDate
CREATE INDEX IF NOT EXISTS idx_visit_status_date ON visit(status, date) WHERE status = 'PLANNED';


-- Time_slot table indexes - for timeslot scheduling

-- For getSortedTimeSlotsForVisit
CREATE INDEX IF NOT EXISTS idx_time_slot_visit_id ON time_slot(visit_id);
-- For getAvailableTimeSlotsByDoctorAndDate
CREATE INDEX IF NOT EXISTS idx_time_slot_doctor_date ON time_slot(doctor_id, date);
-- For getAvailableFutureTimeSlotsByFacilityId
CREATE INDEX IF NOT EXISTS idx_time_slot_facility_date ON time_slot(facility_id, date) WHERE is_busy = false;
-- For is_busy filtering (partial index to help avoid scanning unnecessary rows)
CREATE INDEX IF NOT EXISTS idx_time_slot_is_busy_false ON time_slot(is_busy) WHERE is_busy = false;
-- For getVisitIdsByDoctorAndDateRange
CREATE INDEX IF NOT EXISTS idx_time_slot_doctor_date_visit ON time_slot(doctor_id, date) WHERE visit_id IS NOT NULL;


-- Worktime table indexes

CREATE INDEX IF NOT EXISTS idx_worktime_user_id ON worktime(user_id);


-- FreeDays table indexes

CREATE INDEX IF NOT EXISTS idx_free_days_user_id ON free_days(user_id);


-- User table indexes

CREATE INDEX IF NOT EXISTS idx_user_role ON "User"(role);
CREATE INDEX IF NOT EXISTS idx_user_email ON "User"(email);
CREATE INDEX IF NOT EXISTS idx_user_pesel ON "User"(pesel);
CREATE INDEX IF NOT EXISTS idx_user_account_status ON "User"(account_status);


-- Service table indexes

CREATE INDEX IF NOT EXISTS idx_service_type ON Service(type);


-- Additional_service indexes

CREATE INDEX IF NOT EXISTS idx_additional_service_patient_id ON Additional_service(patient_id);
CREATE INDEX IF NOT EXISTS idx_additional_service_fulfiller_id ON Additional_service(fulfiller_id);
CREATE INDEX IF NOT EXISTS idx_additional_service_service_id ON Additional_service(service_id);
-- For findByPatientIdWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_additional_service_patient_date ON Additional_service(patient_id, date DESC);
-- For findByFulfillerIdWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_additional_service_fulfiller_date ON Additional_service(fulfiller_id, date DESC);
-- For findByServiceIdWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_additional_service_service_date ON Additional_service(service_id, date DESC);
-- For findAllWithDetailsBetweenDates
CREATE INDEX IF NOT EXISTS idx_additional_service_date ON Additional_service(date DESC);


-- Prescription indexes

CREATE INDEX IF NOT EXISTS idx_prescription_visit_id ON Prescription(visit_id);
CREATE INDEX IF NOT EXISTS idx_prescription_status ON Prescription(status);
CREATE INDEX IF NOT EXISTS idx_prescription_expiration_date ON Prescription(expiration_date);


-- Referral indexes

CREATE INDEX IF NOT EXISTS idx_referral_visit_id ON Referral(visit_id);
CREATE INDEX IF NOT EXISTS idx_referral_expiration_date ON Referral(expiration_date);


-- Feedback indexes

CREATE INDEX IF NOT EXISTS idx_feedback_visit_id ON Feedback(visit_id);


-- Attachment indexes

CREATE INDEX IF NOT EXISTS idx_attachment_visit_id ON Attachment(visit_id);
CREATE INDEX IF NOT EXISTS idx_attachment_additional_service_id ON Attachment(additional_service_id);
CREATE INDEX IF NOT EXISTS idx_attachment_status ON Attachment(status);


-- For doctor visit queries with status filtering

CREATE INDEX IF NOT EXISTS idx_visit_doctor_status_date ON Visit(doctor_id, status) 
INCLUDE (facility_id, service_id, patient_id);


-- For patient visit queries with status filtering

CREATE INDEX IF NOT EXISTS idx_visit_patient_status_date ON Visit(patient_id, status) 
INCLUDE (facility_id, service_id, doctor_id);


-- For getDoctorDetails

CREATE INDEX IF NOT EXISTS idx_specialization_id ON Specialization(id);
CREATE INDEX IF NOT EXISTS idx_doctor_spec_doctor_id ON doctor_specialization(doctor_id);
CREATE INDEX IF NOT EXISTS idx_doctor_spec_spec_id ON doctor_specialization(specialization_id);
CREATE INDEX IF NOT EXISTS idx_free_days_user_id ON free_days(user_id);


-- Functions
CREATE OR REPLACE FUNCTION cleanup_otps()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM OTP
     WHERE expires_at < NOW() - INTERVAL '1 day'
        OR used = TRUE;

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION cleanup_pending_users()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM "User"
     WHERE account_status = 'PENDING';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION cleanup_old_timeslots()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM Time_slot
     WHERE date < CURRENT_DATE - INTERVAL '1 month';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION cleanup_old_notifications()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM Notification
     WHERE sent_at IS NOT NULL
       AND sent_at < NOW() - INTERVAL '1 month';

    GET DIAGNOSTICS deleted_count = ROW_COUNT;

    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Tiggers

CREATE OR REPLACE FUNCTION set_notification_sent_at()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.status = 'SENT' AND OLD.status IS DISTINCT FROM 'SENT' THEN
    NEW.sent_at := CURRENT_TIMESTAMP;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trg_set_notification_sent_at
BEFORE UPDATE ON Notification
FOR EACH ROW
EXECUTE FUNCTION set_notification_sent_at();


-- End of file.
