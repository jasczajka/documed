---

- hosts: all
  become: true
  vars_files:
    - vars/passwd.yml
    
  vars:
    cron_db: "prod_db"
    backup_dir: "/var/backups/postgresql"
    pg_dump_path: "/usr/bin/pg_dump"

  tasks:
    - name: Install PostgreSQL and required packages
      apt:
        name:
          - postgresql
          - postgresql-15-cron
          - python3-psycopg2
        state: present
        update_cache: true

    - name: Allow PostgreSQL to listen on all interfaces
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?listen_addresses\s*='
        line: "listen_addresses = '*'"
        state: present
        
    - name: Calculate 25% of total RAM in MB
      set_fact:
        shared_buffers_value: "{{ ((ansible_facts.memtotal_mb * 0.25) | int) }}MB"
        
    - name: Set shared_buffers in postgresql.conf to 25% of RAM memory
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?shared_buffers\s*='
        line: "shared_buffers = {{ shared_buffers_value }}"
        state: present

    - name: Enable pg_cron in shared_preload_libraries
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?shared_preload_libraries\s*='
        line: "shared_preload_libraries = 'pg_cron'"
        state: present

    - name: Allow remote connections in pg_hba.conf
      blockinfile:
        path: /etc/postgresql/15/main/pg_hba.conf
        marker: "# {mark} Ansible managed block for remote access"
        block: |
          host    all             all             0.0.0.0/0            md5
          host    all             all             ::/0                 md5

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
        
    - name: Create prod database
      postgresql_db:
        name: prod_db
      become_user: postgres

    - name: Create test database
      postgresql_db:
        name: test_db
      become_user: postgres
      
    - name: Create user
      postgresql_user:
        name: admin
        password: "{{ vault_postgres_admin_password }}"
        db: prod_db
        role_attr_flags: SUPERUSER
      become_user: postgres

    - name: Create user
      postgresql_user:
        name: admin
        password: "{{ vault_postgres_admin_password }}"
        db: test_db
        role_attr_flags: SUPERUSER
      become_user: postgres
      
    - name: Ensure cron is installed
      package:
        name: cron
        state: present

    - name: Set pg_cron database in postgresql.conf
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?cron\.database_name\s*='
        line: "cron.database_name = '{{ cron_db }}'"
        state: present

    - name: Create pg_cron extension in db
      postgresql_query:
        db: "{{ cron_db }}"
        query: "CREATE EXTENSION IF NOT EXISTS pg_cron;"
      become_user: postgres

    - name: Create tables in the test_db
      postgresql_query:
        db: test_db
        query: "{{ lookup('file', 'queries/documed_ddl.sql') }}"
      become_user: postgres

    - name: Create tables in the prod_db
      postgresql_query:
        db: prod_db
        query: "{{ lookup('file', 'queries/documed_ddl.sql') }}"
      become_user: postgres

    - name: Create pgbackup group
      group:
        name: pgbackup
        state: present

    - name: Add postgres and admin to pgbackup group
      user:
        name: "{{ item }}"
        groups: pgbackup
        append: yes
      loop:
        - postgres
        - admin

    - name: Ensure backup directory exists with secure permissions
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: postgres
        group: pgbackup
        mode: '0750'

    - name: Schedule weekly pg_dump backup via cron on Sunday at 2:00
      cron:
        name: "Weekly PostgreSQL backup"
        user: postgres 
        minute: "0"
        hour: "2"
        weekday: "0"
        job: >-
          /bin/bash -c '
          export PATH=/usr/bin:/bin;
          {{ pg_dump_path }} -Fc -d {{ cron_db }} -f "{{ backup_dir }}/{{ cron_db }}_$(date +\%F_\%H\%M\%S).dump"
          ' >> {{ backup_dir }}/backup.log 2>&1
      
    - name: Schedule jobs using existing SQL file
      postgresql_query:
        db: "{{ cron_db }}"
        query: "{{ lookup('file', 'queries/documed_cron_jobs.sql') }}"
      become_user: postgres
    
      
