---

- hosts: all
  become: true
  vars_files:
    - vars/passwd.yml
    
  vars:
    cron_db: "prod_db"
    backup_dir: "/var/backups/postgresql"
    pg_dump_path: "/usr/bin/pg_dump"

  tasks:
    - name: Install PostgreSQL and required packages
      apt:
        name:
          - postgresql
          - postgresql-15-cron
          - python3-psycopg2
        state: present
        update_cache: true

    - name: Allow PostgreSQL to listen on all interfaces
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?listen_addresses\s*='
        line: "listen_addresses = '*'"
        state: present

    - name: Enable pg_cron in shared_preload_libraries
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?shared_preload_libraries\s*='
        line: "shared_preload_libraries = 'pg_cron'"
        state: present

    - name: Allow remote connections in pg_hba.conf
      blockinfile:
        path: /etc/postgresql/15/main/pg_hba.conf
        marker: "# {mark} Ansible managed block for remote access"
        block: |
          host    all             all             0.0.0.0/0            md5
          host    all             all             ::/0                 md5

    - name: Configure local backup authentication
      blockinfile:
        path: /etc/postgresql/15/main/pg_hba.conf
        marker: "# {mark} Ansible managed block for local backup"
        block: |
          local   {{ cron_db }}    admin                   md5

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
        
    - name: Create prod database
      postgresql_db:
        name: prod_db
      become_user: postgres

    - name: Create test database
      postgresql_db:
        name: test_db
      become_user: postgres
      
    - name: Create user
      postgresql_user:
        name: admin
        password: "{{ vault_postgres_admin_password }}"
        db: prod_db
        role_attr_flags: SUPERUSER
      become_user: postgres

    - name: Create user
      postgresql_user:
        name: admin
        password: "{{ vault_postgres_admin_password }}"
        db: test_db
        role_attr_flags: SUPERUSER
      become_user: postgres
      
    - name: Set pg_cron database in postgresql.conf
      lineinfile:
        path: /etc/postgresql/15/main/postgresql.conf
        regexp: '^#?cron\.database_name\s*='
        line: "cron.database_name = '{{ cron_db }}'"
        state: present

    - name: Create pg_cron extension in db
      postgresql_query:
        db: "{{ cron_db }}"
        query: "CREATE EXTENSION IF NOT EXISTS pg_cron;"
      become_user: postgres

    - name: Create tables in the test_db
      postgresql_query:
        db: test_db
        query: "{{ lookup('file', 'queries/documed_ddl.sql') }}"
      become_user: postgres

    - name: Create tables in the prod_db
      postgresql_query:
        db: prod_db
        query: "{{ lookup('file', 'queries/documed_ddl.sql') }}"
      become_user: postgres

    - name: Ensure backup directory exists
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    - name: Schedule weekly pg_dump backup via cron on Sunday at 2:00
      cron:
        name: "Weekly PostgreSQL backup"
        user: admin 
        minute: "*"
        hour: "*"
        weekday: "*"
        job: >-
          PGPASSWORD='{{ vault_postgres_admin_password }}' {{ pg_dump_path }} -Fc -U admin -d {{ cron_db }} > 
          {{ backup_dir }}/{{ cron_db }}_$(date +\%F).dump
          2>> {{ backup_dir }}/backup_errors.log
      
    - name: Schedule jobs using existing SQL file
      postgresql_query:
        db: "{{ cron_db }}"
        query: "{{ lookup('file', 'queries/documed_cron_jobs.sql') }}"
      become_user: postgres
    
      
