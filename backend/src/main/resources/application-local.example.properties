spring.application.name=backend

spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
# to use this locally remove .example from the file name and
# provide these values for local development
# RUN it with SPRING_PROFILES_ACTIVE=local ./gradlew bootRun
# OR set SPRING_PROFILES_ACTIVE=local as environment variable in run configuration
spring.datasource.ip=
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=

# for using local database with docker, first run npm run db:up in root directory and then set this up as datasource url:
# spring.datasource.url=jdbc:postgresql://localhost:5432/prod_db

jwt.secret=my-very-secret-key-we-should-probably-change-before-release
# 30 min
jwt.expiration=1800
# 5 min
jwt.refresh_threshold=300

allowed_origins={PASTE_API_URL_HERE},http://localhost:5173

time-slot.duration-in-minutes=15

logging.level.org.springframework.web=ERROR
logging.level.com.example=DEBUG

# otp config
otp.length=6
otp.expiration.minutes=5
otp.max.attempts=5
otp.resend.cooldown.minutes=1

# mail config
spring.mail.host={PASTE_HOST_HERE}
spring.mail.port=587
spring.mail.username={PASTE_USERNAME_HERE}
spring.mail.password={PASTE_PASSWORD_HERE}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
app.email.sender-name=DocuMed
app.email.from-address=${spring.mail.username}

# aws config
aws.region={PASTE_REGION_HERE}
aws.s3.access_key_id={PASTE_S3_ACCESS_KEY_ID_HERE}
aws.s3.secret_access_key={PASTE_S3_SECRET_ACCESS_KEY_HERE}
aws.s3.bucket_name={PASTE_BUCKET_NAME_HERE}

medicine_list_file_url=https://rejestry.ezdrowie.gov.pl/api/rpl/medicinal-products/public-pl-report/get-xlsx
