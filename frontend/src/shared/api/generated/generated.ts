/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { ErrorType } from '../axios-instance';
import { customInstance } from '../axios-instance';
export interface RegisterRequestDTO {
  /** @minLength 1 */
  firstName?: string;
  /** @minLength 1 */
  lastName?: string;
  /**
   * @minLength 1
   * @pattern ^\d{11}$
   */
  pesel?: string;
  /**
   * @minLength 1
   * @pattern ^\d{9}$
   */
  phoneNumber?: string;
  /** @minLength 1 */
  email?: string;
  /** @minLength 1 */
  address?: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password?: string;
  /** @minLength 1 */
  confirmPassword?: string;
  birthdate: string;
}

export type AuthResponseDTORole = (typeof AuthResponseDTORole)[keyof typeof AuthResponseDTORole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthResponseDTORole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface AuthResponseDTO {
  token?: string;
  userId?: number;
  role?: AuthResponseDTORole;
}

export interface LoginRequestDTO {
  /** @minLength 1 */
  login?: string;
  /** @minLength 1 */
  password?: string;
}

export type AdditionalServiceStatus =
  (typeof AdditionalServiceStatus)[keyof typeof AdditionalServiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdditionalServiceStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
} as const;

export interface AdditionalService {
  id?: number;
  description?: string;
  date?: string;
  fulfiller?: User;
  service?: Service;
  status?: AdditionalServiceStatus;
  notifications?: Notification[];
  attachments?: Attachment[];
}

export interface Attachment {
  id?: number;
  url?: string;
  visit?: Visit;
  additionalService?: AdditionalService;
}

export interface Facility {
  id?: number;
  address?: string;
  city?: string;
  visits?: Visit[];
}

export interface Feedback {
  id?: number;
  rating?: number;
  text?: string;
  visit?: Visit;
}

export interface FreeDay {
  id?: number;
  date?: string;
  user?: User;
}

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationStatus = {
  QUEUED: 'QUEUED',
  SENT: 'SENT',
  ERROR: 'ERROR',
} as const;

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationType = {
  VISIT_TOMORROW: 'VISIT_TOMORROW',
  NEW_VISIT_INFO: 'NEW_VISIT_INFO',
} as const;

export interface Notification {
  id?: number;
  status?: NotificationStatus;
  visit?: Visit;
  additionalService?: AdditionalService;
  type?: NotificationType;
}

export interface Prescription {
  id?: number;
  accessCode?: number;
  description?: string;
  date?: string;
  expirationDate?: string;
  pesel?: number;
  passportNumber?: string;
  visit?: Visit;
}

export type ReferralType = (typeof ReferralType)[keyof typeof ReferralType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferralType = {
  RTG: 'RTG',
} as const;

export interface Referral {
  id?: number;
  diagnosis?: string;
  type?: ReferralType;
  visit?: Visit;
  expirationDate?: string;
}

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceType = {
  REGULAR_SERVICE: 'REGULAR_SERVICE',
  ADDITIONAL_SERVICE: 'ADDITIONAL_SERVICE',
} as const;

export interface Service {
  id?: number;
  name?: string;
  price?: number;
  type?: ServiceType;
  estimatedTime?: number;
  specializations?: Specialization[];
  additionalServices?: AdditionalService[];
}

export interface Specialization {
  id?: number;
  name?: string;
  services?: Service[];
  users?: User[];
}

export interface Subscription {
  id?: number;
  name?: string;
  price?: number;
  subscriptionServices?: SubscriptionService[];
}

export interface SubscriptionService {
  [key: string]: unknown;
}

export interface TimeSlot {
  [key: string]: unknown;
}

export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface User {
  id?: number;
  firstName?: string;
  lastName?: string;
  pesel?: string;
  passportNumber?: string;
  email?: string;
  address?: string;
  password?: string;
  phoneNumber?: string;
  status?: string;
  birthDate?: string;
  pwzNumber?: string;
  role?: UserRole;
  subscription?: Subscription;
  timeSlots?: TimeSlot[];
  workTimes?: WorkTime[];
  freeDays?: FreeDay[];
  additionalServices?: AdditionalService[];
}

export type VisitStatus = (typeof VisitStatus)[keyof typeof VisitStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VisitStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
} as const;

export interface Visit {
  id?: number;
  status?: VisitStatus;
  interview?: string;
  diagnosis?: string;
  recommendations?: string;
  totalCost?: number;
  facility?: Facility;
  service?: Service;
  patientInformation?: string;
  patient?: User;
  doctor?: User;
  feedback?: Feedback;
  attachments?: Attachment[];
  prescriptions?: Prescription[];
  referrals?: Referral[];
  notifications?: Notification[];
  timeSlots?: TimeSlot[];
}

export interface WorkTime {
  [key: string]: unknown;
}

export const register = (registerRequestDTO: RegisterRequestDTO, signal?: AbortSignal) => {
  return customInstance<AuthResponseDTO>({
    url: `/api/auth/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: registerRequestDTO,
    signal,
  });
};

export const getRegisterMutationOptions = <
  TError = ErrorType<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: RegisterRequestDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequestDTO },
  TContext
> => {
  const mutationKey = ['register'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: RegisterRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return register(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>;
export type RegisterMutationBody = RegisterRequestDTO;
export type RegisterMutationError = ErrorType<string>;

export const useRegister = <TError = ErrorType<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: RegisterRequestDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequestDTO },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const logout = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/api/auth/logout`, method: 'POST', signal });
};

export const getLogoutMutationOptions = <TError = ErrorType<string>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext> => {
  const mutationKey = ['logout'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, void> = () => {
    return logout();
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>;

export type LogoutMutationError = ErrorType<string>;

export const useLogout = <TError = ErrorType<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError, void, TContext>;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof logout>>, TError, void, TContext> => {
  const mutationOptions = getLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const login = (loginRequestDTO: LoginRequestDTO, signal?: AbortSignal) => {
  return customInstance<AuthResponseDTO>({
    url: `/api/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginRequestDTO,
    signal,
  });
};

export const getLoginMutationOptions = <TError = ErrorType<string>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequestDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequestDTO },
  TContext
> => {
  const mutationKey = ['login'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginRequestDTO;
export type LoginMutationError = ErrorType<string>;

export const useLogin = <TError = ErrorType<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: LoginRequestDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequestDTO },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getAllFacilities = (signal?: AbortSignal) => {
  return customInstance<Facility[]>({ url: `/api/facilities`, method: 'GET', signal });
};

export const getGetAllFacilitiesQueryKey = () => {
  return [`/api/facilities`] as const;
};

export const getGetAllFacilitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllFacilities>>,
  TError = ErrorType<string>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFacilities>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllFacilitiesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFacilities>>> = ({ signal }) =>
    getAllFacilities(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllFacilities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllFacilitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFacilities>>>;
export type GetAllFacilitiesQueryError = ErrorType<string>;

export function useGetAllFacilities<
  TData = Awaited<ReturnType<typeof getAllFacilities>>,
  TError = ErrorType<string>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFacilities>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllFacilities>>,
          TError,
          Awaited<ReturnType<typeof getAllFacilities>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllFacilities<
  TData = Awaited<ReturnType<typeof getAllFacilities>>,
  TError = ErrorType<string>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFacilities>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllFacilities>>,
          TError,
          Awaited<ReturnType<typeof getAllFacilities>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllFacilities<
  TData = Awaited<ReturnType<typeof getAllFacilities>>,
  TError = ErrorType<string>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFacilities>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllFacilities<
  TData = Awaited<ReturnType<typeof getAllFacilities>>,
  TError = ErrorType<string>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFacilities>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllFacilitiesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFacility = (id: number, signal?: AbortSignal) => {
  return customInstance<Facility>({ url: `/api/facilities/${id}`, method: 'GET', signal });
};

export const getGetFacilityQueryKey = (id: number) => {
  return [`/api/facilities/${id}`] as const;
};

export const getGetFacilityQueryOptions = <
  TData = Awaited<ReturnType<typeof getFacility>>,
  TError = ErrorType<string>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacility>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFacilityQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFacility>>> = ({ signal }) =>
    getFacility(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFacility>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFacilityQueryResult = NonNullable<Awaited<ReturnType<typeof getFacility>>>;
export type GetFacilityQueryError = ErrorType<string>;

export function useGetFacility<
  TData = Awaited<ReturnType<typeof getFacility>>,
  TError = ErrorType<string>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacility>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacility>>,
          TError,
          Awaited<ReturnType<typeof getFacility>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetFacility<
  TData = Awaited<ReturnType<typeof getFacility>>,
  TError = ErrorType<string>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacility>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacility>>,
          TError,
          Awaited<ReturnType<typeof getFacility>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetFacility<
  TData = Awaited<ReturnType<typeof getFacility>>,
  TError = ErrorType<string>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacility>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetFacility<
  TData = Awaited<ReturnType<typeof getFacility>>,
  TError = ErrorType<string>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacility>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetFacilityQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
