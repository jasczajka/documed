/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type {
  CompleteUploadRequestDTO,
  FileInfoDTO,
  GenerateUploadUrlRequestDTO,
  UploadUrlResponseDTO,
} from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const generateUploadUrl = (
  generateUploadUrlRequestDTO: GenerateUploadUrlRequestDTO,
  signal?: AbortSignal,
) => {
  return customInstance<UploadUrlResponseDTO>({
    url: `/api/attachments/start-upload`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: generateUploadUrlRequestDTO,
    signal,
  });
};

export const getGenerateUploadUrlMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof generateUploadUrl>>,
    TError,
    { data: GenerateUploadUrlRequestDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof generateUploadUrl>>,
  TError,
  { data: GenerateUploadUrlRequestDTO },
  TContext
> => {
  const mutationKey = ['generateUploadUrl'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof generateUploadUrl>>,
    { data: GenerateUploadUrlRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return generateUploadUrl(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GenerateUploadUrlMutationResult = NonNullable<
  Awaited<ReturnType<typeof generateUploadUrl>>
>;
export type GenerateUploadUrlMutationBody = GenerateUploadUrlRequestDTO;
export type GenerateUploadUrlMutationError = ErrorType<unknown>;

export const useGenerateUploadUrl = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof generateUploadUrl>>,
      TError,
      { data: GenerateUploadUrlRequestDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof generateUploadUrl>>,
  TError,
  { data: GenerateUploadUrlRequestDTO },
  TContext
> => {
  const mutationOptions = getGenerateUploadUrlMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const completeUpload = (
  completeUploadRequestDTO: CompleteUploadRequestDTO,
  signal?: AbortSignal,
) => {
  return customInstance<string>({
    url: `/api/attachments/complete-upload`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: completeUploadRequestDTO,
    signal,
  });
};

export const getCompleteUploadMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof completeUpload>>,
    TError,
    { data: CompleteUploadRequestDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof completeUpload>>,
  TError,
  { data: CompleteUploadRequestDTO },
  TContext
> => {
  const mutationKey = ['completeUpload'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof completeUpload>>,
    { data: CompleteUploadRequestDTO }
  > = (props) => {
    const { data } = props ?? {};

    return completeUpload(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CompleteUploadMutationResult = NonNullable<Awaited<ReturnType<typeof completeUpload>>>;
export type CompleteUploadMutationBody = CompleteUploadRequestDTO;
export type CompleteUploadMutationError = ErrorType<unknown>;

export const useCompleteUpload = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof completeUpload>>,
      TError,
      { data: CompleteUploadRequestDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof completeUpload>>,
  TError,
  { data: CompleteUploadRequestDTO },
  TContext
> => {
  const mutationOptions = getCompleteUploadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getDownloadUrl = (id: number, signal?: AbortSignal) => {
  return customInstance<string>({ url: `/api/attachments/${id}`, method: 'GET', signal });
};

export const getGetDownloadUrlQueryKey = (id: number) => {
  return [`/api/attachments/${id}`] as const;
};

export const getGetDownloadUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getDownloadUrl>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDownloadUrl>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDownloadUrlQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDownloadUrl>>> = ({ signal }) =>
    getDownloadUrl(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDownloadUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDownloadUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getDownloadUrl>>>;
export type GetDownloadUrlQueryError = ErrorType<unknown>;

export function useGetDownloadUrl<
  TData = Awaited<ReturnType<typeof getDownloadUrl>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDownloadUrl>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDownloadUrl>>,
          TError,
          Awaited<ReturnType<typeof getDownloadUrl>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDownloadUrl<
  TData = Awaited<ReturnType<typeof getDownloadUrl>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDownloadUrl>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDownloadUrl>>,
          TError,
          Awaited<ReturnType<typeof getDownloadUrl>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDownloadUrl<
  TData = Awaited<ReturnType<typeof getDownloadUrl>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDownloadUrl>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDownloadUrl<
  TData = Awaited<ReturnType<typeof getDownloadUrl>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDownloadUrl>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDownloadUrlQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteFile = (id: number) => {
  return customInstance<string>({ url: `/api/attachments/${id}`, method: 'DELETE' });
};

export const getDeleteFileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFile>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteFile'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFile>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteFile(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFileMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFile>>>;

export type DeleteFileMutationError = ErrorType<unknown>;

export const useDeleteFile = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteFile>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteFile>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getFilesForPatient = (userId: number, signal?: AbortSignal) => {
  return customInstance<FileInfoDTO[]>({
    url: `/api/attachments/patients/${userId}`,
    method: 'GET',
    signal,
  });
};

export const getGetFilesForPatientQueryKey = (userId: number) => {
  return [`/api/attachments/patients/${userId}`] as const;
};

export const getGetFilesForPatientQueryOptions = <
  TData = Awaited<ReturnType<typeof getFilesForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilesForPatient>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFilesForPatientQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFilesForPatient>>> = ({ signal }) =>
    getFilesForPatient(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFilesForPatient>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFilesForPatientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFilesForPatient>>
>;
export type GetFilesForPatientQueryError = ErrorType<unknown>;

export function useGetFilesForPatient<
  TData = Awaited<ReturnType<typeof getFilesForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilesForPatient>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilesForPatient>>,
          TError,
          Awaited<ReturnType<typeof getFilesForPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetFilesForPatient<
  TData = Awaited<ReturnType<typeof getFilesForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFilesForPatient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFilesForPatient>>,
          TError,
          Awaited<ReturnType<typeof getFilesForPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetFilesForPatient<
  TData = Awaited<ReturnType<typeof getFilesForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilesForPatient>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetFilesForPatient<
  TData = Awaited<ReturnType<typeof getFilesForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getFilesForPatient>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetFilesForPatientQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
