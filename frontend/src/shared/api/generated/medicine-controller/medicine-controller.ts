/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';

import type {
  GetAllMedicinesParams,
  LiteMedicine,
  Medicine,
  SearchMedicinesParams,
} from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary Get all medicines (full version)
 */
export const getAllMedicines = (params?: GetAllMedicinesParams, signal?: AbortSignal) => {
  return customInstance<Medicine[]>({ url: `/api/medicines`, method: 'GET', params, signal });
};

export const getGetAllMedicinesQueryKey = (params?: GetAllMedicinesParams) => {
  return [`/api/medicines`, ...(params ? [params] : [])] as const;
};

export const getGetAllMedicinesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllMedicines>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMedicines>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllMedicinesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMedicines>>> = ({ signal }) =>
    getAllMedicines(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllMedicines>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllMedicinesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMedicines>>>;
export type GetAllMedicinesQueryError = ErrorType<unknown>;

export function useGetAllMedicines<
  TData = Awaited<ReturnType<typeof getAllMedicines>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetAllMedicinesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMedicines>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMedicines>>,
          TError,
          Awaited<ReturnType<typeof getAllMedicines>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllMedicines<
  TData = Awaited<ReturnType<typeof getAllMedicines>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMedicines>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMedicines>>,
          TError,
          Awaited<ReturnType<typeof getAllMedicines>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllMedicines<
  TData = Awaited<ReturnType<typeof getAllMedicines>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMedicines>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all medicines (full version)
 */

export function useGetAllMedicines<
  TData = Awaited<ReturnType<typeof getAllMedicines>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMedicines>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllMedicinesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get medicine by ID
 */
export const getMedicine = (id: number, signal?: AbortSignal) => {
  return customInstance<Medicine>({ url: `/api/medicines/${id}`, method: 'GET', signal });
};

export const getGetMedicineQueryKey = (id: number) => {
  return [`/api/medicines/${id}`] as const;
};

export const getGetMedicineQueryOptions = <
  TData = Awaited<ReturnType<typeof getMedicine>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicine>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMedicineQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMedicine>>> = ({ signal }) =>
    getMedicine(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMedicine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMedicineQueryResult = NonNullable<Awaited<ReturnType<typeof getMedicine>>>;
export type GetMedicineQueryError = ErrorType<unknown>;

export function useGetMedicine<
  TData = Awaited<ReturnType<typeof getMedicine>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicine>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMedicine>>,
          TError,
          Awaited<ReturnType<typeof getMedicine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMedicine<
  TData = Awaited<ReturnType<typeof getMedicine>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicine>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMedicine>>,
          TError,
          Awaited<ReturnType<typeof getMedicine>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetMedicine<
  TData = Awaited<ReturnType<typeof getMedicine>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicine>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get medicine by ID
 */

export function useGetMedicine<
  TData = Awaited<ReturnType<typeof getMedicine>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicine>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetMedicineQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Search medicines (lite version for async select)
 */
export const searchMedicines = (params: SearchMedicinesParams, signal?: AbortSignal) => {
  return customInstance<LiteMedicine[]>({
    url: `/api/medicines/search`,
    method: 'GET',
    params,
    signal,
  });
};

export const getSearchMedicinesQueryKey = (params: SearchMedicinesParams) => {
  return [`/api/medicines/search`, ...(params ? [params] : [])] as const;
};

export const getSearchMedicinesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchMedicines>>,
  TError = ErrorType<unknown>,
>(
  params: SearchMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMedicines>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchMedicinesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMedicines>>> = ({ signal }) =>
    searchMedicines(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchMedicines>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchMedicinesQueryResult = NonNullable<Awaited<ReturnType<typeof searchMedicines>>>;
export type SearchMedicinesQueryError = ErrorType<unknown>;

export function useSearchMedicines<
  TData = Awaited<ReturnType<typeof searchMedicines>>,
  TError = ErrorType<unknown>,
>(
  params: SearchMedicinesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMedicines>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMedicines>>,
          TError,
          Awaited<ReturnType<typeof searchMedicines>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSearchMedicines<
  TData = Awaited<ReturnType<typeof searchMedicines>>,
  TError = ErrorType<unknown>,
>(
  params: SearchMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMedicines>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMedicines>>,
          TError,
          Awaited<ReturnType<typeof searchMedicines>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSearchMedicines<
  TData = Awaited<ReturnType<typeof searchMedicines>>,
  TError = ErrorType<unknown>,
>(
  params: SearchMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMedicines>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Search medicines (lite version for async select)
 */

export function useSearchMedicines<
  TData = Awaited<ReturnType<typeof searchMedicines>>,
  TError = ErrorType<unknown>,
>(
  params: SearchMedicinesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMedicines>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSearchMedicinesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
