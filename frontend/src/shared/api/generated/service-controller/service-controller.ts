/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { CreateServiceDTO, Service, Specialization } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const getAllServices = (signal?: AbortSignal) => {
  return customInstance<Service[]>({ url: `/api/services`, method: 'GET', signal });
};

export const getGetAllServicesQueryKey = () => {
  return [`/api/services`] as const;
};

export const getGetAllServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllServices>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllServices>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllServicesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllServices>>> = ({ signal }) =>
    getAllServices(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllServices>>>;
export type GetAllServicesQueryError = ErrorType<unknown>;

export function useGetAllServices<
  TData = Awaited<ReturnType<typeof getAllServices>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllServices>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllServices>>,
          TError,
          Awaited<ReturnType<typeof getAllServices>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllServices<
  TData = Awaited<ReturnType<typeof getAllServices>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllServices>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllServices>>,
          TError,
          Awaited<ReturnType<typeof getAllServices>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllServices<
  TData = Awaited<ReturnType<typeof getAllServices>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllServices>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllServices<
  TData = Awaited<ReturnType<typeof getAllServices>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllServices>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllServicesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createService = (createServiceDTO: CreateServiceDTO, signal?: AbortSignal) => {
  return customInstance<Service>({
    url: `/api/services`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createServiceDTO,
    signal,
  });
};

export const getCreateServiceMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createService>>,
    TError,
    { data: CreateServiceDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createService>>,
  TError,
  { data: CreateServiceDTO },
  TContext
> => {
  const mutationKey = ['createService'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createService>>,
    { data: CreateServiceDTO }
  > = (props) => {
    const { data } = props ?? {};

    return createService(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateServiceMutationResult = NonNullable<Awaited<ReturnType<typeof createService>>>;
export type CreateServiceMutationBody = CreateServiceDTO;
export type CreateServiceMutationError = ErrorType<unknown>;

export const useCreateService = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createService>>,
      TError,
      { data: CreateServiceDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createService>>,
  TError,
  { data: CreateServiceDTO },
  TContext
> => {
  const mutationOptions = getCreateServiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const addSpecializationToService = (
  id: number,
  addSpecializationToServiceBody: number,
  signal?: AbortSignal,
) => {
  return customInstance<Specialization>({
    url: `/api/services/${id}/specialization`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: addSpecializationToServiceBody,
    signal,
  });
};

export const getAddSpecializationToServiceMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addSpecializationToService>>,
    TError,
    { id: number; data: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addSpecializationToService>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationKey = ['addSpecializationToService'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addSpecializationToService>>,
    { id: number; data: number }
  > = (props) => {
    const { id, data } = props ?? {};

    return addSpecializationToService(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddSpecializationToServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof addSpecializationToService>>
>;
export type AddSpecializationToServiceMutationBody = number;
export type AddSpecializationToServiceMutationError = ErrorType<unknown>;

export const useAddSpecializationToService = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addSpecializationToService>>,
      TError,
      { id: number; data: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addSpecializationToService>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationOptions = getAddSpecializationToServiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const removeSpecializationFromService = (
  id: number,
  removeSpecializationFromServiceBody: number,
) => {
  return customInstance<string>({
    url: `/api/services/${id}/specialization`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: removeSpecializationFromServiceBody,
  });
};

export const getRemoveSpecializationFromServiceMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeSpecializationFromService>>,
    TError,
    { id: number; data: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeSpecializationFromService>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationKey = ['removeSpecializationFromService'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeSpecializationFromService>>,
    { id: number; data: number }
  > = (props) => {
    const { id, data } = props ?? {};

    return removeSpecializationFromService(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveSpecializationFromServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeSpecializationFromService>>
>;
export type RemoveSpecializationFromServiceMutationBody = number;
export type RemoveSpecializationFromServiceMutationError = ErrorType<unknown>;

export const useRemoveSpecializationFromService = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeSpecializationFromService>>,
      TError,
      { id: number; data: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeSpecializationFromService>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationOptions = getRemoveSpecializationFromServiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateServiceTime = (id: number, updateServiceTimeBody: number) => {
  return customInstance<Service>({
    url: `/api/services/${id}/time`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateServiceTimeBody,
  });
};

export const getUpdateServiceTimeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateServiceTime>>,
    TError,
    { id: number; data: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateServiceTime>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationKey = ['updateServiceTime'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateServiceTime>>,
    { id: number; data: number }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateServiceTime(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateServiceTimeMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateServiceTime>>
>;
export type UpdateServiceTimeMutationBody = number;
export type UpdateServiceTimeMutationError = ErrorType<unknown>;

export const useUpdateServiceTime = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateServiceTime>>,
      TError,
      { id: number; data: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateServiceTime>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationOptions = getUpdateServiceTimeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateServicePrice = (id: number, updateServicePriceBody: number) => {
  return customInstance<Service>({
    url: `/api/services/${id}/price`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateServicePriceBody,
  });
};

export const getUpdateServicePriceMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateServicePrice>>,
    TError,
    { id: number; data: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateServicePrice>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationKey = ['updateServicePrice'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateServicePrice>>,
    { id: number; data: number }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateServicePrice(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateServicePriceMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateServicePrice>>
>;
export type UpdateServicePriceMutationBody = number;
export type UpdateServicePriceMutationError = ErrorType<unknown>;

export const useUpdateServicePrice = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateServicePrice>>,
      TError,
      { id: number; data: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateServicePrice>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationOptions = getUpdateServicePriceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getService = (id: number, signal?: AbortSignal) => {
  return customInstance<Service>({ url: `/api/services/${id}`, method: 'GET', signal });
};

export const getGetServiceQueryKey = (id: number) => {
  return [`/api/services/${id}`] as const;
};

export const getGetServiceQueryOptions = <
  TData = Awaited<ReturnType<typeof getService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetServiceQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getService>>> = ({ signal }) =>
    getService(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getService>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetServiceQueryResult = NonNullable<Awaited<ReturnType<typeof getService>>>;
export type GetServiceQueryError = ErrorType<unknown>;

export function useGetService<
  TData = Awaited<ReturnType<typeof getService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getService>>,
          TError,
          Awaited<ReturnType<typeof getService>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetService<
  TData = Awaited<ReturnType<typeof getService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getService>>,
          TError,
          Awaited<ReturnType<typeof getService>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetService<
  TData = Awaited<ReturnType<typeof getService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetService<
  TData = Awaited<ReturnType<typeof getService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getService>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetServiceQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteService = (id: number) => {
  return customInstance<string>({ url: `/api/services/${id}`, method: 'DELETE' });
};

export const getDeleteServiceMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteService>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteService>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteService'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteService>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteService(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteServiceMutationResult = NonNullable<Awaited<ReturnType<typeof deleteService>>>;

export type DeleteServiceMutationError = ErrorType<unknown>;

export const useDeleteService = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteService>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteService>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteServiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
