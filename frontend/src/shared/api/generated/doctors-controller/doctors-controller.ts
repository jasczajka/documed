/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { DoctorDetailsDTO, UpdateDoctorSpecializationsDTO } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const getDoctorDetails = (id: number, signal?: AbortSignal) => {
  return customInstance<DoctorDetailsDTO>({ url: `/api/doctors/${id}`, method: 'GET', signal });
};

export const getGetDoctorDetailsQueryKey = (id: number) => {
  return [`/api/doctors/${id}`] as const;
};

export const getGetDoctorDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDoctorDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorDetails>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDoctorDetailsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDoctorDetails>>> = ({ signal }) =>
    getDoctorDetails(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDoctorDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDoctorDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getDoctorDetails>>>;
export type GetDoctorDetailsQueryError = ErrorType<unknown>;

export function useGetDoctorDetails<
  TData = Awaited<ReturnType<typeof getDoctorDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorDetails>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDoctorDetails>>,
          TError,
          Awaited<ReturnType<typeof getDoctorDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDoctorDetails<
  TData = Awaited<ReturnType<typeof getDoctorDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorDetails>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDoctorDetails>>,
          TError,
          Awaited<ReturnType<typeof getDoctorDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDoctorDetails<
  TData = Awaited<ReturnType<typeof getDoctorDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorDetails>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDoctorDetails<
  TData = Awaited<ReturnType<typeof getDoctorDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDoctorDetails>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDoctorDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateDoctorSpecializations = (
  id: number,
  updateDoctorSpecializationsDTO: UpdateDoctorSpecializationsDTO,
) => {
  return customInstance<number[]>({
    url: `/api/doctors/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateDoctorSpecializationsDTO,
  });
};

export const getUpdateDoctorSpecializationsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDoctorSpecializations>>,
    TError,
    { id: number; data: UpdateDoctorSpecializationsDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDoctorSpecializations>>,
  TError,
  { id: number; data: UpdateDoctorSpecializationsDTO },
  TContext
> => {
  const mutationKey = ['updateDoctorSpecializations'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDoctorSpecializations>>,
    { id: number; data: UpdateDoctorSpecializationsDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateDoctorSpecializations(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateDoctorSpecializationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDoctorSpecializations>>
>;
export type UpdateDoctorSpecializationsMutationBody = UpdateDoctorSpecializationsDTO;
export type UpdateDoctorSpecializationsMutationError = ErrorType<unknown>;

export const useUpdateDoctorSpecializations = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateDoctorSpecializations>>,
      TError,
      { id: number; data: UpdateDoctorSpecializationsDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateDoctorSpecializations>>,
  TError,
  { id: number; data: UpdateDoctorSpecializationsDTO },
  TContext
> => {
  const mutationOptions = getUpdateDoctorSpecializationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAllDoctors = (signal?: AbortSignal) => {
  return customInstance<DoctorDetailsDTO[]>({ url: `/api/doctors`, method: 'GET', signal });
};

export const getGetAllDoctorsQueryKey = () => {
  return [`/api/doctors`] as const;
};

export const getGetAllDoctorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllDoctors>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctors>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllDoctorsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllDoctors>>> = ({ signal }) =>
    getAllDoctors(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllDoctors>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllDoctorsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllDoctors>>>;
export type GetAllDoctorsQueryError = ErrorType<unknown>;

export function useGetAllDoctors<
  TData = Awaited<ReturnType<typeof getAllDoctors>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctors>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDoctors>>,
          TError,
          Awaited<ReturnType<typeof getAllDoctors>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllDoctors<
  TData = Awaited<ReturnType<typeof getAllDoctors>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctors>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllDoctors>>,
          TError,
          Awaited<ReturnType<typeof getAllDoctors>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllDoctors<
  TData = Awaited<ReturnType<typeof getAllDoctors>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctors>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllDoctors<
  TData = Awaited<ReturnType<typeof getAllDoctors>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllDoctors>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllDoctorsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
