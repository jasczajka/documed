/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type {
  AdditionalServiceWithDetails,
  CreateAdditionalServiceDTO,
  GetAdditionalServicesByFulfillerParams,
  GetAdditionalServicesByPatientParams,
  GetAdditionalServicesByServiceParams,
  GetAllAdditionalServicesParams,
  UpdateAttachmentsDTO,
  UpdateDescriptionDTO,
} from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const updateAdditionalServiceDescription = (
  id: number,
  updateDescriptionDTO: UpdateDescriptionDTO,
) => {
  return customInstance<void>({
    url: `/api/additional_services/${id}/description`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateDescriptionDTO,
  });
};

export const getUpdateAdditionalServiceDescriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdditionalServiceDescription>>,
    TError,
    { id: number; data: UpdateDescriptionDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdditionalServiceDescription>>,
  TError,
  { id: number; data: UpdateDescriptionDTO },
  TContext
> => {
  const mutationKey = ['updateAdditionalServiceDescription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdditionalServiceDescription>>,
    { id: number; data: UpdateDescriptionDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateAdditionalServiceDescription(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAdditionalServiceDescriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdditionalServiceDescription>>
>;
export type UpdateAdditionalServiceDescriptionMutationBody = UpdateDescriptionDTO;
export type UpdateAdditionalServiceDescriptionMutationError = ErrorType<unknown>;

export const useUpdateAdditionalServiceDescription = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdditionalServiceDescription>>,
      TError,
      { id: number; data: UpdateDescriptionDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdditionalServiceDescription>>,
  TError,
  { id: number; data: UpdateDescriptionDTO },
  TContext
> => {
  const mutationOptions = getUpdateAdditionalServiceDescriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateAdditionalServiceAttachments = (
  id: number,
  updateAttachmentsDTO: UpdateAttachmentsDTO,
) => {
  return customInstance<AdditionalServiceWithDetails>({
    url: `/api/additional_services/${id}/attachments`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateAttachmentsDTO,
  });
};

export const getUpdateAdditionalServiceAttachmentsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdditionalServiceAttachments>>,
    TError,
    { id: number; data: UpdateAttachmentsDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdditionalServiceAttachments>>,
  TError,
  { id: number; data: UpdateAttachmentsDTO },
  TContext
> => {
  const mutationKey = ['updateAdditionalServiceAttachments'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdditionalServiceAttachments>>,
    { id: number; data: UpdateAttachmentsDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateAdditionalServiceAttachments(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAdditionalServiceAttachmentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdditionalServiceAttachments>>
>;
export type UpdateAdditionalServiceAttachmentsMutationBody = UpdateAttachmentsDTO;
export type UpdateAdditionalServiceAttachmentsMutationError = ErrorType<unknown>;

export const useUpdateAdditionalServiceAttachments = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdditionalServiceAttachments>>,
      TError,
      { id: number; data: UpdateAttachmentsDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdditionalServiceAttachments>>,
  TError,
  { id: number; data: UpdateAttachmentsDTO },
  TContext
> => {
  const mutationOptions = getUpdateAdditionalServiceAttachmentsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAllAdditionalServices = (
  params?: GetAllAdditionalServicesParams,
  signal?: AbortSignal,
) => {
  return customInstance<AdditionalServiceWithDetails[]>({
    url: `/api/additional_services`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetAllAdditionalServicesQueryKey = (params?: GetAllAdditionalServicesParams) => {
  return [`/api/additional_services`, ...(params ? [params] : [])] as const;
};

export const getGetAllAdditionalServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllAdditionalServices>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllAdditionalServicesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdditionalServices>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllAdditionalServicesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllAdditionalServices>>> = ({
    signal,
  }) => getAllAdditionalServices(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllAdditionalServices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllAdditionalServicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllAdditionalServices>>
>;
export type GetAllAdditionalServicesQueryError = ErrorType<unknown>;

export function useGetAllAdditionalServices<
  TData = Awaited<ReturnType<typeof getAllAdditionalServices>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetAllAdditionalServicesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdditionalServices>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdditionalServices>>,
          TError,
          Awaited<ReturnType<typeof getAllAdditionalServices>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllAdditionalServices<
  TData = Awaited<ReturnType<typeof getAllAdditionalServices>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllAdditionalServicesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdditionalServices>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllAdditionalServices>>,
          TError,
          Awaited<ReturnType<typeof getAllAdditionalServices>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllAdditionalServices<
  TData = Awaited<ReturnType<typeof getAllAdditionalServices>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllAdditionalServicesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdditionalServices>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllAdditionalServices<
  TData = Awaited<ReturnType<typeof getAllAdditionalServices>>,
  TError = ErrorType<unknown>,
>(
  params?: GetAllAdditionalServicesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllAdditionalServices>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllAdditionalServicesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createAdditionalService = (
  createAdditionalServiceDTO: CreateAdditionalServiceDTO,
  signal?: AbortSignal,
) => {
  return customInstance<AdditionalServiceWithDetails>({
    url: `/api/additional_services`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createAdditionalServiceDTO,
    signal,
  });
};

export const getCreateAdditionalServiceMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdditionalService>>,
    TError,
    { data: CreateAdditionalServiceDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdditionalService>>,
  TError,
  { data: CreateAdditionalServiceDTO },
  TContext
> => {
  const mutationKey = ['createAdditionalService'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdditionalService>>,
    { data: CreateAdditionalServiceDTO }
  > = (props) => {
    const { data } = props ?? {};

    return createAdditionalService(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAdditionalServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdditionalService>>
>;
export type CreateAdditionalServiceMutationBody = CreateAdditionalServiceDTO;
export type CreateAdditionalServiceMutationError = ErrorType<unknown>;

export const useCreateAdditionalService = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdditionalService>>,
      TError,
      { data: CreateAdditionalServiceDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdditionalService>>,
  TError,
  { data: CreateAdditionalServiceDTO },
  TContext
> => {
  const mutationOptions = getCreateAdditionalServiceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAdditionalService = (id: number, signal?: AbortSignal) => {
  return customInstance<AdditionalServiceWithDetails>({
    url: `/api/additional_services/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetAdditionalServiceQueryKey = (id: number) => {
  return [`/api/additional_services/${id}`] as const;
};

export const getGetAdditionalServiceQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdditionalService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalService>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAdditionalServiceQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdditionalService>>> = ({ signal }) =>
    getAdditionalService(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdditionalService>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAdditionalServiceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdditionalService>>
>;
export type GetAdditionalServiceQueryError = ErrorType<unknown>;

export function useGetAdditionalService<
  TData = Awaited<ReturnType<typeof getAdditionalService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalService>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalService>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalService>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalService<
  TData = Awaited<ReturnType<typeof getAdditionalService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalService>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalService>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalService>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalService<
  TData = Awaited<ReturnType<typeof getAdditionalService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalService>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAdditionalService<
  TData = Awaited<ReturnType<typeof getAdditionalService>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalService>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAdditionalServiceQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdditionalServicesByService = (
  serviceId: number,
  params?: GetAdditionalServicesByServiceParams,
  signal?: AbortSignal,
) => {
  return customInstance<AdditionalServiceWithDetails[]>({
    url: `/api/additional_services/services/${serviceId}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetAdditionalServicesByServiceQueryKey = (
  serviceId: number,
  params?: GetAdditionalServicesByServiceParams,
) => {
  return [`/api/additional_services/services/${serviceId}`, ...(params ? [params] : [])] as const;
};

export const getGetAdditionalServicesByServiceQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdditionalServicesByService>>,
  TError = ErrorType<unknown>,
>(
  serviceId: number,
  params?: GetAdditionalServicesByServiceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByService>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdditionalServicesByServiceQueryKey(serviceId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdditionalServicesByService>>> = ({
    signal,
  }) => getAdditionalServicesByService(serviceId, params, signal);

  return { queryKey, queryFn, enabled: !!serviceId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdditionalServicesByService>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAdditionalServicesByServiceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdditionalServicesByService>>
>;
export type GetAdditionalServicesByServiceQueryError = ErrorType<unknown>;

export function useGetAdditionalServicesByService<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByService>>,
  TError = ErrorType<unknown>,
>(
  serviceId: number,
  params: undefined | GetAdditionalServicesByServiceParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByService>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalServicesByService>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalServicesByService>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalServicesByService<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByService>>,
  TError = ErrorType<unknown>,
>(
  serviceId: number,
  params?: GetAdditionalServicesByServiceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByService>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalServicesByService>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalServicesByService>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalServicesByService<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByService>>,
  TError = ErrorType<unknown>,
>(
  serviceId: number,
  params?: GetAdditionalServicesByServiceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByService>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAdditionalServicesByService<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByService>>,
  TError = ErrorType<unknown>,
>(
  serviceId: number,
  params?: GetAdditionalServicesByServiceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByService>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAdditionalServicesByServiceQueryOptions(serviceId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdditionalServicesByPatient = (
  userId: number,
  params?: GetAdditionalServicesByPatientParams,
  signal?: AbortSignal,
) => {
  return customInstance<AdditionalServiceWithDetails[]>({
    url: `/api/additional_services/patients/${userId}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetAdditionalServicesByPatientQueryKey = (
  userId: number,
  params?: GetAdditionalServicesByPatientParams,
) => {
  return [`/api/additional_services/patients/${userId}`, ...(params ? [params] : [])] as const;
};

export const getGetAdditionalServicesByPatientQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByPatientParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByPatient>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdditionalServicesByPatientQueryKey(userId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdditionalServicesByPatient>>> = ({
    signal,
  }) => getAdditionalServicesByPatient(userId, params, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAdditionalServicesByPatientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdditionalServicesByPatient>>
>;
export type GetAdditionalServicesByPatientQueryError = ErrorType<unknown>;

export function useGetAdditionalServicesByPatient<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params: undefined | GetAdditionalServicesByPatientParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByPatient>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalServicesByPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalServicesByPatient<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByPatientParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByPatient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalServicesByPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalServicesByPatient<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByPatientParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByPatient>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAdditionalServicesByPatient<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByPatientParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByPatient>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAdditionalServicesByPatientQueryOptions(userId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdditionalServicesByFulfiller = (
  userId: number,
  params?: GetAdditionalServicesByFulfillerParams,
  signal?: AbortSignal,
) => {
  return customInstance<AdditionalServiceWithDetails[]>({
    url: `/api/additional_services/fulfillers/${userId}`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetAdditionalServicesByFulfillerQueryKey = (
  userId: number,
  params?: GetAdditionalServicesByFulfillerParams,
) => {
  return [`/api/additional_services/fulfillers/${userId}`, ...(params ? [params] : [])] as const;
};

export const getGetAdditionalServicesByFulfillerQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByFulfillerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdditionalServicesByFulfillerQueryKey(userId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>> = ({
    signal,
  }) => getAdditionalServicesByFulfiller(userId, params, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAdditionalServicesByFulfillerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>
>;
export type GetAdditionalServicesByFulfillerQueryError = ErrorType<unknown>;

export function useGetAdditionalServicesByFulfiller<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params: undefined | GetAdditionalServicesByFulfillerParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalServicesByFulfiller<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByFulfillerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
          TError,
          Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAdditionalServicesByFulfiller<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByFulfillerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAdditionalServicesByFulfiller<
  TData = Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  params?: GetAdditionalServicesByFulfillerParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAdditionalServicesByFulfiller>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAdditionalServicesByFulfillerQueryOptions(userId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
