/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type {
  CreateSubscriptionParams,
  GetAllSubscriptions200,
  Subscription,
  SubscriptionToService,
} from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const updateServiceDiscount = (
  subscriptionId: number,
  serviceId: number,
  updateServiceDiscountBody: number,
) => {
  return customInstance<string>({
    url: `/api/subscriptions/${subscriptionId}/services/${serviceId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateServiceDiscountBody,
  });
};

export const getUpdateServiceDiscountMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateServiceDiscount>>,
    TError,
    { subscriptionId: number; serviceId: number; data: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateServiceDiscount>>,
  TError,
  { subscriptionId: number; serviceId: number; data: number },
  TContext
> => {
  const mutationKey = ['updateServiceDiscount'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateServiceDiscount>>,
    { subscriptionId: number; serviceId: number; data: number }
  > = (props) => {
    const { subscriptionId, serviceId, data } = props ?? {};

    return updateServiceDiscount(subscriptionId, serviceId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateServiceDiscountMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateServiceDiscount>>
>;
export type UpdateServiceDiscountMutationBody = number;
export type UpdateServiceDiscountMutationError = ErrorType<unknown>;

export const useUpdateServiceDiscount = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateServiceDiscount>>,
      TError,
      { subscriptionId: number; serviceId: number; data: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateServiceDiscount>>,
  TError,
  { subscriptionId: number; serviceId: number; data: number },
  TContext
> => {
  const mutationOptions = getUpdateServiceDiscountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all subscriptions
 */
export const getAllSubscriptions = (signal?: AbortSignal) => {
  return customInstance<GetAllSubscriptions200>({
    url: `/api/subscriptions`,
    method: 'GET',
    signal,
  });
};

export const getGetAllSubscriptionsQueryKey = () => {
  return [`/api/subscriptions`] as const;
};

export const getGetAllSubscriptionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSubscriptions>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSubscriptions>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSubscriptionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSubscriptions>>> = ({ signal }) =>
    getAllSubscriptions(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllSubscriptions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllSubscriptionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSubscriptions>>
>;
export type GetAllSubscriptionsQueryError = ErrorType<unknown>;

export function useGetAllSubscriptions<
  TData = Awaited<ReturnType<typeof getAllSubscriptions>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllSubscriptions>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSubscriptions>>,
          TError,
          Awaited<ReturnType<typeof getAllSubscriptions>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllSubscriptions<
  TData = Awaited<ReturnType<typeof getAllSubscriptions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllSubscriptions>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSubscriptions>>,
          TError,
          Awaited<ReturnType<typeof getAllSubscriptions>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllSubscriptions<
  TData = Awaited<ReturnType<typeof getAllSubscriptions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllSubscriptions>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all subscriptions
 */

export function useGetAllSubscriptions<
  TData = Awaited<ReturnType<typeof getAllSubscriptions>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllSubscriptions>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllSubscriptionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createSubscription = (params: CreateSubscriptionParams, signal?: AbortSignal) => {
  return customInstance<Subscription>({
    url: `/api/subscriptions`,
    method: 'POST',
    params,
    signal,
  });
};

export const getCreateSubscriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSubscription>>,
    TError,
    { params: CreateSubscriptionParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSubscription>>,
  TError,
  { params: CreateSubscriptionParams },
  TContext
> => {
  const mutationKey = ['createSubscription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSubscription>>,
    { params: CreateSubscriptionParams }
  > = (props) => {
    const { params } = props ?? {};

    return createSubscription(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSubscription>>
>;

export type CreateSubscriptionMutationError = ErrorType<unknown>;

export const useCreateSubscription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSubscription>>,
      TError,
      { params: CreateSubscriptionParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createSubscription>>,
  TError,
  { params: CreateSubscriptionParams },
  TContext
> => {
  const mutationOptions = getCreateSubscriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAllSubscriptionToServiceForSubscription = (
  subscriptionId: number,
  signal?: AbortSignal,
) => {
  return customInstance<SubscriptionToService[]>({
    url: `/api/subscriptions/${subscriptionId}/services`,
    method: 'GET',
    signal,
  });
};

export const getGetAllSubscriptionToServiceForSubscriptionQueryKey = (subscriptionId: number) => {
  return [`/api/subscriptions/${subscriptionId}/services`] as const;
};

export const getGetAllSubscriptionToServiceForSubscriptionQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
  TError = ErrorType<unknown>,
>(
  subscriptionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllSubscriptionToServiceForSubscriptionQueryKey(subscriptionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>
  > = ({ signal }) => getAllSubscriptionToServiceForSubscription(subscriptionId, signal);

  return { queryKey, queryFn, enabled: !!subscriptionId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllSubscriptionToServiceForSubscriptionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>
>;
export type GetAllSubscriptionToServiceForSubscriptionQueryError = ErrorType<unknown>;

export function useGetAllSubscriptionToServiceForSubscription<
  TData = Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
  TError = ErrorType<unknown>,
>(
  subscriptionId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
          TError,
          Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllSubscriptionToServiceForSubscription<
  TData = Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
  TError = ErrorType<unknown>,
>(
  subscriptionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
          TError,
          Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllSubscriptionToServiceForSubscription<
  TData = Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
  TError = ErrorType<unknown>,
>(
  subscriptionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllSubscriptionToServiceForSubscription<
  TData = Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
  TError = ErrorType<unknown>,
>(
  subscriptionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllSubscriptionToServiceForSubscription>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllSubscriptionToServiceForSubscriptionQueryOptions(
    subscriptionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get subscription by ID
 */
export const getSubscription = (id: number, signal?: AbortSignal) => {
  return customInstance<Subscription>({ url: `/api/subscriptions/${id}`, method: 'GET', signal });
};

export const getGetSubscriptionQueryKey = (id: number) => {
  return [`/api/subscriptions/${id}`] as const;
};

export const getGetSubscriptionQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscription>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscription>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubscriptionQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubscription>>> = ({ signal }) =>
    getSubscription(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscription>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubscriptionQueryResult = NonNullable<Awaited<ReturnType<typeof getSubscription>>>;
export type GetSubscriptionQueryError = ErrorType<unknown>;

export function useGetSubscription<
  TData = Awaited<ReturnType<typeof getSubscription>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscription>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscription>>,
          TError,
          Awaited<ReturnType<typeof getSubscription>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubscription<
  TData = Awaited<ReturnType<typeof getSubscription>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscription>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubscription>>,
          TError,
          Awaited<ReturnType<typeof getSubscription>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubscription<
  TData = Awaited<ReturnType<typeof getSubscription>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscription>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get subscription by ID
 */

export function useGetSubscription<
  TData = Awaited<ReturnType<typeof getSubscription>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubscription>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubscriptionQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteSubscription = (id: number) => {
  return customInstance<string>({ url: `/api/subscriptions/${id}`, method: 'DELETE' });
};

export const getDeleteSubscriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubscription>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSubscription>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteSubscription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSubscription>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSubscription(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSubscription>>
>;

export type DeleteSubscriptionMutationError = ErrorType<unknown>;

export const useDeleteSubscription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteSubscription>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteSubscription>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteSubscriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
