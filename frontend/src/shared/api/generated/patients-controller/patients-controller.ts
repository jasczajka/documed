/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { PatientDetailsDTO, UpdateUserPersonalDataDTO } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary Set patient subscription
 */
export const updateUserSubscription = (id: number, updateUserSubscriptionBody: number) => {
  return customInstance<string>({
    url: `/api/patients/${id}/subscription`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserSubscriptionBody,
  });
};

export const getUpdateUserSubscriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserSubscription>>,
    TError,
    { id: number; data: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserSubscription>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationKey = ['updateUserSubscription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserSubscription>>,
    { id: number; data: number }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateUserSubscription(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserSubscription>>
>;
export type UpdateUserSubscriptionMutationBody = number;
export type UpdateUserSubscriptionMutationError = ErrorType<unknown>;

/**
 * @summary Set patient subscription
 */
export const useUpdateUserSubscription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserSubscription>>,
      TError,
      { id: number; data: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserSubscription>>,
  TError,
  { id: number; data: number },
  TContext
> => {
  const mutationOptions = getUpdateUserSubscriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Cancel patient subscription
 */
export const removeUserSubscription = (id: number) => {
  return customInstance<string>({
    url: `/api/patients/${id}/subscription/cancel`,
    method: 'PATCH',
  });
};

export const getRemoveUserSubscriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeUserSubscription>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeUserSubscription>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['removeUserSubscription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeUserSubscription>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return removeUserSubscription(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveUserSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeUserSubscription>>
>;

export type RemoveUserSubscriptionMutationError = ErrorType<unknown>;

/**
 * @summary Cancel patient subscription
 */
export const useRemoveUserSubscription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeUserSubscription>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeUserSubscription>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getRemoveUserSubscriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Update patient personal data
 */
export const updatePatientPersonalData = (
  id: number,
  updateUserPersonalDataDTO: UpdateUserPersonalDataDTO,
) => {
  return customInstance<PatientDetailsDTO>({
    url: `/api/patients/${id}/personal-data`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserPersonalDataDTO,
  });
};

export const getUpdatePatientPersonalDataMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePatientPersonalData>>,
    TError,
    { id: number; data: UpdateUserPersonalDataDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePatientPersonalData>>,
  TError,
  { id: number; data: UpdateUserPersonalDataDTO },
  TContext
> => {
  const mutationKey = ['updatePatientPersonalData'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePatientPersonalData>>,
    { id: number; data: UpdateUserPersonalDataDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return updatePatientPersonalData(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePatientPersonalDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePatientPersonalData>>
>;
export type UpdatePatientPersonalDataMutationBody = UpdateUserPersonalDataDTO;
export type UpdatePatientPersonalDataMutationError = ErrorType<unknown>;

/**
 * @summary Update patient personal data
 */
export const useUpdatePatientPersonalData = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePatientPersonalData>>,
      TError,
      { id: number; data: UpdateUserPersonalDataDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updatePatientPersonalData>>,
  TError,
  { id: number; data: UpdateUserPersonalDataDTO },
  TContext
> => {
  const mutationOptions = getUpdatePatientPersonalDataMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAllPatientsDetails = (signal?: AbortSignal) => {
  return customInstance<PatientDetailsDTO[]>({ url: `/api/patients`, method: 'GET', signal });
};

export const getGetAllPatientsDetailsQueryKey = () => {
  return [`/api/patients`] as const;
};

export const getGetAllPatientsDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllPatientsDetails>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllPatientsDetails>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllPatientsDetailsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllPatientsDetails>>> = ({ signal }) =>
    getAllPatientsDetails(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllPatientsDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllPatientsDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllPatientsDetails>>
>;
export type GetAllPatientsDetailsQueryError = ErrorType<unknown>;

export function useGetAllPatientsDetails<
  TData = Awaited<ReturnType<typeof getAllPatientsDetails>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllPatientsDetails>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPatientsDetails>>,
          TError,
          Awaited<ReturnType<typeof getAllPatientsDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllPatientsDetails<
  TData = Awaited<ReturnType<typeof getAllPatientsDetails>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllPatientsDetails>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllPatientsDetails>>,
          TError,
          Awaited<ReturnType<typeof getAllPatientsDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllPatientsDetails<
  TData = Awaited<ReturnType<typeof getAllPatientsDetails>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllPatientsDetails>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAllPatientsDetails<
  TData = Awaited<ReturnType<typeof getAllPatientsDetails>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllPatientsDetails>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllPatientsDetailsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPatientDetails = (id: number, signal?: AbortSignal) => {
  return customInstance<PatientDetailsDTO>({ url: `/api/patients/${id}`, method: 'GET', signal });
};

export const getGetPatientDetailsQueryKey = (id: number) => {
  return [`/api/patients/${id}`] as const;
};

export const getGetPatientDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPatientDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientDetails>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPatientDetailsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatientDetails>>> = ({ signal }) =>
    getPatientDetails(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPatientDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPatientDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPatientDetails>>
>;
export type GetPatientDetailsQueryError = ErrorType<unknown>;

export function useGetPatientDetails<
  TData = Awaited<ReturnType<typeof getPatientDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientDetails>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPatientDetails>>,
          TError,
          Awaited<ReturnType<typeof getPatientDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPatientDetails<
  TData = Awaited<ReturnType<typeof getPatientDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientDetails>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPatientDetails>>,
          TError,
          Awaited<ReturnType<typeof getPatientDetails>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPatientDetails<
  TData = Awaited<ReturnType<typeof getPatientDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientDetails>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetPatientDetails<
  TData = Awaited<ReturnType<typeof getPatientDetails>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientDetails>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPatientDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deletePatientPersonalData = (id: number) => {
  return customInstance<void>({ url: `/api/patients/${id}`, method: 'DELETE' });
};

export const getDeletePatientPersonalDataMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePatientPersonalData>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePatientPersonalData>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deletePatientPersonalData'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePatientPersonalData>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletePatientPersonalData(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePatientPersonalDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePatientPersonalData>>
>;

export type DeletePatientPersonalDataMutationError = ErrorType<unknown>;

export const useDeletePatientPersonalData = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePatientPersonalData>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePatientPersonalData>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeletePatientPersonalDataMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
