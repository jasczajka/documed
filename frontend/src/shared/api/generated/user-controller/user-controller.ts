/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import type { Specialization } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const toggleEmailNotifications = () => {
  return customInstance<Specialization[]>({ url: `/api/user`, method: 'PATCH' });
};

export const getToggleEmailNotificationsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toggleEmailNotifications>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toggleEmailNotifications>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['toggleEmailNotifications'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toggleEmailNotifications>>,
    void
  > = () => {
    return toggleEmailNotifications();
  };

  return { mutationFn, ...mutationOptions };
};

export type ToggleEmailNotificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof toggleEmailNotifications>>
>;

export type ToggleEmailNotificationsMutationError = ErrorType<unknown>;

export const useToggleEmailNotifications = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toggleEmailNotifications>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toggleEmailNotifications>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getToggleEmailNotificationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
