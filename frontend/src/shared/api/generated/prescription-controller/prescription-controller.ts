/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { AddMedicineToPrescriptionParams, Medicine, Prescription } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary Add Medicine To Prescription
 */
export const addMedicineToPrescription = (
  prescriptionId: number,
  medicineId: string,
  params?: AddMedicineToPrescriptionParams,
  signal?: AbortSignal,
) => {
  return customInstance<Medicine>({
    url: `/api/prescriptions/${prescriptionId}/medicine/${medicineId}`,
    method: 'POST',
    params,
    signal,
  });
};

export const getAddMedicineToPrescriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addMedicineToPrescription>>,
    TError,
    { prescriptionId: number; medicineId: string; params?: AddMedicineToPrescriptionParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addMedicineToPrescription>>,
  TError,
  { prescriptionId: number; medicineId: string; params?: AddMedicineToPrescriptionParams },
  TContext
> => {
  const mutationKey = ['addMedicineToPrescription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addMedicineToPrescription>>,
    { prescriptionId: number; medicineId: string; params?: AddMedicineToPrescriptionParams }
  > = (props) => {
    const { prescriptionId, medicineId, params } = props ?? {};

    return addMedicineToPrescription(prescriptionId, medicineId, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddMedicineToPrescriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof addMedicineToPrescription>>
>;

export type AddMedicineToPrescriptionMutationError = ErrorType<unknown>;

/**
 * @summary Add Medicine To Prescription
 */
export const useAddMedicineToPrescription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addMedicineToPrescription>>,
      TError,
      { prescriptionId: number; medicineId: string; params?: AddMedicineToPrescriptionParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addMedicineToPrescription>>,
  TError,
  { prescriptionId: number; medicineId: string; params?: AddMedicineToPrescriptionParams },
  TContext
> => {
  const mutationOptions = getAddMedicineToPrescriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Remove Medicine From Prescription
 */
export const removeMedicineFromPrescription = (prescriptionId: number, medicineId: string) => {
  return customInstance<number>({
    url: `/api/prescriptions/${prescriptionId}/medicine/${medicineId}`,
    method: 'DELETE',
  });
};

export const getRemoveMedicineFromPrescriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeMedicineFromPrescription>>,
    TError,
    { prescriptionId: number; medicineId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeMedicineFromPrescription>>,
  TError,
  { prescriptionId: number; medicineId: string },
  TContext
> => {
  const mutationKey = ['removeMedicineFromPrescription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeMedicineFromPrescription>>,
    { prescriptionId: number; medicineId: string }
  > = (props) => {
    const { prescriptionId, medicineId } = props ?? {};

    return removeMedicineFromPrescription(prescriptionId, medicineId);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveMedicineFromPrescriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeMedicineFromPrescription>>
>;

export type RemoveMedicineFromPrescriptionMutationError = ErrorType<unknown>;

/**
 * @summary Remove Medicine From Prescription
 */
export const useRemoveMedicineFromPrescription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeMedicineFromPrescription>>,
      TError,
      { prescriptionId: number; medicineId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeMedicineFromPrescription>>,
  TError,
  { prescriptionId: number; medicineId: string },
  TContext
> => {
  const mutationOptions = getRemoveMedicineFromPrescriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Prescription For Visit
 */
export const getPrescriptionForVisit = (visitId: number, signal?: AbortSignal) => {
  return customInstance<Prescription>({
    url: `/api/prescriptions/visit/${visitId}`,
    method: 'GET',
    signal,
  });
};

export const getGetPrescriptionForVisitQueryKey = (visitId: number) => {
  return [`/api/prescriptions/visit/${visitId}`] as const;
};

export const getGetPrescriptionForVisitQueryOptions = <
  TData = Awaited<ReturnType<typeof getPrescriptionForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionForVisit>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPrescriptionForVisitQueryKey(visitId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrescriptionForVisit>>> = ({
    signal,
  }) => getPrescriptionForVisit(visitId, signal);

  return { queryKey, queryFn, enabled: !!visitId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPrescriptionForVisit>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPrescriptionForVisitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPrescriptionForVisit>>
>;
export type GetPrescriptionForVisitQueryError = ErrorType<unknown>;

export function useGetPrescriptionForVisit<
  TData = Awaited<ReturnType<typeof getPrescriptionForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionForVisit>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrescriptionForVisit>>,
          TError,
          Awaited<ReturnType<typeof getPrescriptionForVisit>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPrescriptionForVisit<
  TData = Awaited<ReturnType<typeof getPrescriptionForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionForVisit>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrescriptionForVisit>>,
          TError,
          Awaited<ReturnType<typeof getPrescriptionForVisit>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPrescriptionForVisit<
  TData = Awaited<ReturnType<typeof getPrescriptionForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionForVisit>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Prescription For Visit
 */

export function useGetPrescriptionForVisit<
  TData = Awaited<ReturnType<typeof getPrescriptionForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionForVisit>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPrescriptionForVisitQueryOptions(visitId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Prescription
 */
export const createPrescription = (visitId: number, signal?: AbortSignal) => {
  return customInstance<Prescription>({
    url: `/api/prescriptions/visit/${visitId}`,
    method: 'POST',
    signal,
  });
};

export const getCreatePrescriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPrescription>>,
    TError,
    { visitId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPrescription>>,
  TError,
  { visitId: number },
  TContext
> => {
  const mutationKey = ['createPrescription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPrescription>>,
    { visitId: number }
  > = (props) => {
    const { visitId } = props ?? {};

    return createPrescription(visitId);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePrescriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPrescription>>
>;

export type CreatePrescriptionMutationError = ErrorType<unknown>;

/**
 * @summary Create Prescription
 */
export const useCreatePrescription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPrescription>>,
      TError,
      { visitId: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createPrescription>>,
  TError,
  { visitId: number },
  TContext
> => {
  const mutationOptions = getCreatePrescriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Remove prescription
 */
export const removePrescription = (prescriptionId: number) => {
  return customInstance<number>({ url: `/api/prescriptions/${prescriptionId}`, method: 'DELETE' });
};

export const getRemovePrescriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removePrescription>>,
    TError,
    { prescriptionId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removePrescription>>,
  TError,
  { prescriptionId: number },
  TContext
> => {
  const mutationKey = ['removePrescription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removePrescription>>,
    { prescriptionId: number }
  > = (props) => {
    const { prescriptionId } = props ?? {};

    return removePrescription(prescriptionId);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemovePrescriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof removePrescription>>
>;

export type RemovePrescriptionMutationError = ErrorType<unknown>;

/**
 * @summary Remove prescription
 */
export const useRemovePrescription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removePrescription>>,
      TError,
      { prescriptionId: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removePrescription>>,
  TError,
  { prescriptionId: number },
  TContext
> => {
  const mutationOptions = getRemovePrescriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Issue prescription
 */
export const issuePrescription = (prescriptionId: number) => {
  return customInstance<Prescription>({
    url: `/api/prescriptions/${prescriptionId}`,
    method: 'PATCH',
  });
};

export const getIssuePrescriptionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof issuePrescription>>,
    TError,
    { prescriptionId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof issuePrescription>>,
  TError,
  { prescriptionId: number },
  TContext
> => {
  const mutationKey = ['issuePrescription'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof issuePrescription>>,
    { prescriptionId: number }
  > = (props) => {
    const { prescriptionId } = props ?? {};

    return issuePrescription(prescriptionId);
  };

  return { mutationFn, ...mutationOptions };
};

export type IssuePrescriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof issuePrescription>>
>;

export type IssuePrescriptionMutationError = ErrorType<unknown>;

/**
 * @summary Issue prescription
 */
export const useIssuePrescription = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof issuePrescription>>,
      TError,
      { prescriptionId: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof issuePrescription>>,
  TError,
  { prescriptionId: number },
  TContext
> => {
  const mutationOptions = getIssuePrescriptionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getPrescriptionsForUser = (userId: number, signal?: AbortSignal) => {
  return customInstance<Prescription[]>({
    url: `/api/prescriptions/user/${userId}`,
    method: 'GET',
    signal,
  });
};

export const getGetPrescriptionsForUserQueryKey = (userId: number) => {
  return [`/api/prescriptions/user/${userId}`] as const;
};

export const getGetPrescriptionsForUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getPrescriptionsForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionsForUser>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPrescriptionsForUserQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrescriptionsForUser>>> = ({
    signal,
  }) => getPrescriptionsForUser(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPrescriptionsForUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPrescriptionsForUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPrescriptionsForUser>>
>;
export type GetPrescriptionsForUserQueryError = ErrorType<unknown>;

export function useGetPrescriptionsForUser<
  TData = Awaited<ReturnType<typeof getPrescriptionsForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionsForUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrescriptionsForUser>>,
          TError,
          Awaited<ReturnType<typeof getPrescriptionsForUser>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPrescriptionsForUser<
  TData = Awaited<ReturnType<typeof getPrescriptionsForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionsForUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrescriptionsForUser>>,
          TError,
          Awaited<ReturnType<typeof getPrescriptionsForUser>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetPrescriptionsForUser<
  TData = Awaited<ReturnType<typeof getPrescriptionsForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionsForUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetPrescriptionsForUser<
  TData = Awaited<ReturnType<typeof getPrescriptionsForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrescriptionsForUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetPrescriptionsForUserQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
