/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type {
  AvailableTimeSlotDTO,
  FreeDaysDTO,
  FreeDaysReturnDTO,
  GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  TimeSlot,
} from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary Create new FreeDays for doctor
 */
export const createFreeDays = (freeDaysDTO: FreeDaysDTO, signal?: AbortSignal) => {
  return customInstance<FreeDaysReturnDTO>({
    url: `/timeslots/freeDay`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: freeDaysDTO,
    signal,
  });
};

export const getCreateFreeDaysMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFreeDays>>,
    TError,
    { data: FreeDaysDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFreeDays>>,
  TError,
  { data: FreeDaysDTO },
  TContext
> => {
  const mutationKey = ['createFreeDays'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFreeDays>>,
    { data: FreeDaysDTO }
  > = (props) => {
    const { data } = props ?? {};

    return createFreeDays(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFreeDaysMutationResult = NonNullable<Awaited<ReturnType<typeof createFreeDays>>>;
export type CreateFreeDaysMutationBody = FreeDaysDTO;
export type CreateFreeDaysMutationError = ErrorType<unknown>;

/**
 * @summary Create new FreeDays for doctor
 */
export const useCreateFreeDays = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFreeDays>>,
      TError,
      { data: FreeDaysDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createFreeDays>>,
  TError,
  { data: FreeDaysDTO },
  TContext
> => {
  const mutationOptions = getCreateFreeDaysMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get timeslot by id
 */
export const getTimeSlotById = (id: number, signal?: AbortSignal) => {
  return customInstance<TimeSlot>({ url: `/timeslots/${id}`, method: 'GET', signal });
};

export const getGetTimeSlotByIdQueryKey = (id: number) => {
  return [`/timeslots/${id}`] as const;
};

export const getGetTimeSlotByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTimeSlotById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeSlotById>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTimeSlotByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTimeSlotById>>> = ({ signal }) =>
    getTimeSlotById(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSlotById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTimeSlotByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTimeSlotById>>>;
export type GetTimeSlotByIdQueryError = ErrorType<unknown>;

export function useGetTimeSlotById<
  TData = Awaited<ReturnType<typeof getTimeSlotById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeSlotById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimeSlotById>>,
          TError,
          Awaited<ReturnType<typeof getTimeSlotById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTimeSlotById<
  TData = Awaited<ReturnType<typeof getTimeSlotById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeSlotById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimeSlotById>>,
          TError,
          Awaited<ReturnType<typeof getTimeSlotById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTimeSlotById<
  TData = Awaited<ReturnType<typeof getTimeSlotById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeSlotById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get timeslot by id
 */

export function useGetTimeSlotById<
  TData = Awaited<ReturnType<typeof getTimeSlotById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimeSlotById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTimeSlotByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get available timeslots for doctor by id and required visit length
 */
export const getAvailableFirstTimeSlotsByDoctorAndFacility = (
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  signal?: AbortSignal,
) => {
  return customInstance<AvailableTimeSlotDTO[]>({
    url: `/timeslots/doctors/${doctorId}/available-timeslots`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetAvailableFirstTimeSlotsByDoctorAndFacilityQueryKey = (
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
) => {
  return [
    `/timeslots/doctors/${doctorId}/available-timeslots`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAvailableFirstTimeSlotsByDoctorAndFacilityQueryOptions = <
  TData = Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
  TError = ErrorType<unknown>,
>(
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAvailableFirstTimeSlotsByDoctorAndFacilityQueryKey(doctorId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>
  > = ({ signal }) => getAvailableFirstTimeSlotsByDoctorAndFacility(doctorId, params, signal);

  return { queryKey, queryFn, enabled: !!doctorId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAvailableFirstTimeSlotsByDoctorAndFacilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>
>;
export type GetAvailableFirstTimeSlotsByDoctorAndFacilityQueryError = ErrorType<unknown>;

export function useGetAvailableFirstTimeSlotsByDoctorAndFacility<
  TData = Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
  TError = ErrorType<unknown>,
>(
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
          TError,
          Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAvailableFirstTimeSlotsByDoctorAndFacility<
  TData = Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
  TError = ErrorType<unknown>,
>(
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
          TError,
          Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAvailableFirstTimeSlotsByDoctorAndFacility<
  TData = Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
  TError = ErrorType<unknown>,
>(
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get available timeslots for doctor by id and required visit length
 */

export function useGetAvailableFirstTimeSlotsByDoctorAndFacility<
  TData = Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
  TError = ErrorType<unknown>,
>(
  doctorId: number,
  params: GetAvailableFirstTimeSlotsByDoctorAndFacilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableFirstTimeSlotsByDoctorAndFacility>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAvailableFirstTimeSlotsByDoctorAndFacilityQueryOptions(
    doctorId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Cancel existing FreeDays for doctor
 */
export const cancelFreeDays = (id: number) => {
  return customInstance<void>({ url: `/timeslots/freeDay/${id}`, method: 'DELETE' });
};

export const getCancelFreeDaysMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelFreeDays>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelFreeDays>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['cancelFreeDays'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof cancelFreeDays>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return cancelFreeDays(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelFreeDaysMutationResult = NonNullable<Awaited<ReturnType<typeof cancelFreeDays>>>;

export type CancelFreeDaysMutationError = ErrorType<unknown>;

/**
 * @summary Cancel existing FreeDays for doctor
 */
export const useCancelFreeDays = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof cancelFreeDays>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof cancelFreeDays>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getCancelFreeDaysMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
