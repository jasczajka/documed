/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
export interface RegisterRequestDTO {
  /** @minLength 1 */
  firstName?: string;
  /** @minLength 1 */
  lastName?: string;
  /**
   * @minLength 1
   * @pattern ^\d{11}$
   */
  pesel?: string;
  /**
   * @minLength 1
   * @pattern ^\d{9}$
   */
  phoneNumber?: string;
  /** @minLength 1 */
  email?: string;
  /** @minLength 1 */
  address?: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password?: string;
  /** @minLength 1 */
  confirmPassword?: string;
  birthdate: string;
}

export type AuthResponseDTORole = (typeof AuthResponseDTORole)[keyof typeof AuthResponseDTORole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthResponseDTORole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface AuthResponseDTO {
  token?: string;
  userId?: number;
  role?: AuthResponseDTORole;
}

export interface LoginRequestDTO {
  /** @minLength 1 */
  login?: string;
  /** @minLength 1 */
  password?: string;
}

export type AdditionalServiceStatus =
  (typeof AdditionalServiceStatus)[keyof typeof AdditionalServiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdditionalServiceStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
} as const;

export interface AdditionalService {
  id?: number;
  description?: string;
  date?: string;
  fulfiller?: User;
  service?: Service;
  status?: AdditionalServiceStatus;
  notifications?: Notification[];
  attachments?: Attachment[];
}

export interface Attachment {
  id?: number;
  url?: string;
  visit?: Visit;
  additionalService?: AdditionalService;
}

export interface Facility {
  id?: number;
  address?: string;
  city?: string;
  visits?: Visit[];
}

export interface Feedback {
  id?: number;
  rating?: number;
  text?: string;
  visit?: Visit;
}

export interface FreeDay {
  id?: number;
  date?: string;
  user?: User;
}

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationStatus = {
  QUEUED: 'QUEUED',
  SENT: 'SENT',
  ERROR: 'ERROR',
} as const;

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationType = {
  VISIT_TOMORROW: 'VISIT_TOMORROW',
  NEW_VISIT_INFO: 'NEW_VISIT_INFO',
} as const;

export interface Notification {
  id?: number;
  status?: NotificationStatus;
  visit?: Visit;
  additionalService?: AdditionalService;
  type?: NotificationType;
}

export interface Prescription {
  id?: number;
  accessCode?: number;
  description?: string;
  date?: string;
  expirationDate?: string;
  pesel?: number;
  passportNumber?: string;
  visit?: Visit;
}

export type ReferralType = (typeof ReferralType)[keyof typeof ReferralType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferralType = {
  RTG: 'RTG',
} as const;

export interface Referral {
  id?: number;
  diagnosis?: string;
  type?: ReferralType;
  visit?: Visit;
  expirationDate?: string;
}

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceType = {
  REGULAR_SERVICE: 'REGULAR_SERVICE',
  ADDITIONAL_SERVICE: 'ADDITIONAL_SERVICE',
} as const;

export interface Service {
  id?: number;
  name?: string;
  price?: number;
  type?: ServiceType;
  estimatedTime?: number;
  specializations?: Specialization[];
  additionalServices?: AdditionalService[];
}

export interface Specialization {
  id?: number;
  name?: string;
  services?: Service[];
  users?: User[];
}

export interface Subscription {
  id?: number;
  name?: string;
  price?: number;
  subscriptionServices?: SubscriptionService[];
}

export interface SubscriptionService {
  [key: string]: unknown;
}

export interface TimeSlot {
  [key: string]: unknown;
}

export type UserAccountStatus = (typeof UserAccountStatus)[keyof typeof UserAccountStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserAccountStatus = {
  ACTIVE: 'ACTIVE',
  DEACTIVATED: 'DEACTIVATED',
} as const;

export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface User {
  id: number;
  firstName: string;
  lastName: string;
  pesel?: string;
  passportNumber?: string;
  email: string;
  address: string;
  password?: string;
  phoneNumber?: string;
  accountStatus: UserAccountStatus;
  birthDate?: string;
  pwzNumber?: string;
  role: UserRole;
  subscription?: Subscription;
  timeSlots?: TimeSlot[];
  workTimes?: WorkTime[];
  freeDays?: FreeDay[];
  additionalServices?: AdditionalService[];
}

export type VisitStatus = (typeof VisitStatus)[keyof typeof VisitStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VisitStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
} as const;

export interface Visit {
  id?: number;
  status?: VisitStatus;
  interview?: string;
  diagnosis?: string;
  recommendations?: string;
  totalCost?: number;
  facility?: Facility;
  service?: Service;
  patientInformation?: string;
  patient?: User;
  doctor?: User;
  feedback?: Feedback;
  attachments?: Attachment[];
  prescriptions?: Prescription[];
  referrals?: Referral[];
  notifications?: Notification[];
  timeSlots?: TimeSlot[];
}

export interface WorkTime {
  [key: string]: unknown;
}
