/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
export type WorkTimeDTODayOfWeek = (typeof WorkTimeDTODayOfWeek)[keyof typeof WorkTimeDTODayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WorkTimeDTODayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY',
} as const;

export interface WorkTimeDTO {
  dayOfWeek: WorkTimeDTODayOfWeek;
  startTime: string;
  endTime: string;
}

export type WorkTimeDayOfWeek = (typeof WorkTimeDayOfWeek)[keyof typeof WorkTimeDayOfWeek];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WorkTimeDayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY',
} as const;

export interface WorkTime {
  id: number;
  userId: number;
  dayOfWeek: WorkTimeDayOfWeek;
  startTime: string;
  endTime: string;
}

export type CreateServiceDTOType = (typeof CreateServiceDTOType)[keyof typeof CreateServiceDTOType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateServiceDTOType = {
  REGULAR_SERVICE: 'REGULAR_SERVICE',
  ADDITIONAL_SERVICE: 'ADDITIONAL_SERVICE',
} as const;

export interface CreateServiceDTO {
  name: string;
  price: number;
  type: CreateServiceDTOType;
  estimatedTime: number;
  /** @minItems 1 */
  specializationIds: number[];
}

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceType = {
  REGULAR_SERVICE: 'REGULAR_SERVICE',
  ADDITIONAL_SERVICE: 'ADDITIONAL_SERVICE',
} as const;

export interface Service {
  id: number;
  name: string;
  price: number;
  type: ServiceType;
  estimatedTime: number;
}

export interface Specialization {
  id: number;
  name: string;
}

export interface Medicine {
  id: string;
  name: string;
  commonName: string;
  dosage: string;
}

export type PrescriptionStatus = (typeof PrescriptionStatus)[keyof typeof PrescriptionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PrescriptionStatus = {
  NEW: 'NEW',
  ISSUED: 'ISSUED',
} as const;

export interface Prescription {
  id: number;
  accessCode: number;
  date: string;
  expirationDate: string;
  status: PrescriptionStatus;
}

export interface ResetPasswordConfirmDTO {
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 6
   * @maxLength 6
   */
  otp: string;
}

export interface PatientRegisterRequestDTO {
  /** @minLength 1 */
  firstName: string;
  /** @minLength 1 */
  lastName: string;
  /** @pattern ^\d{11}$ */
  pesel?: string;
  /**
   * @minLength 1
   * @pattern ^\d{9}$
   */
  phoneNumber: string;
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  address: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password: string;
  /** @minLength 1 */
  confirmPassword: string;
  birthdate: string;
}

export type PendingUserDTORole = (typeof PendingUserDTORole)[keyof typeof PendingUserDTORole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PendingUserDTORole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export type PendingUserDTOAccountStatus =
  (typeof PendingUserDTOAccountStatus)[keyof typeof PendingUserDTOAccountStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PendingUserDTOAccountStatus = {
  ACTIVE: 'ACTIVE',
  PENDING_CONFIRMATION: 'PENDING_CONFIRMATION',
  DEACTIVATED: 'DEACTIVATED',
} as const;

export interface PendingUserDTO {
  id?: number;
  firstName?: string;
  lastName?: string;
  email?: string;
  pesel?: string;
  phoneNumber?: string;
  address?: string;
  birthDate?: string;
  role?: PendingUserDTORole;
  accountStatus?: PendingUserDTOAccountStatus;
}

export interface ResetPasswordRequestDTO {
  email: string;
}

export type StaffRegisterRequestDTORole =
  (typeof StaffRegisterRequestDTORole)[keyof typeof StaffRegisterRequestDTORole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StaffRegisterRequestDTORole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface StaffRegisterRequestDTO {
  role: StaffRegisterRequestDTORole;
  /** @minLength 1 */
  firstName: string;
  /** @minLength 1 */
  lastName: string;
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password: string;
}

export type AuthResponseDTORole = (typeof AuthResponseDTORole)[keyof typeof AuthResponseDTORole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthResponseDTORole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface AuthResponseDTO {
  token?: string;
  userId?: number;
  role?: AuthResponseDTORole;
}

export interface DoctorRegisterRequestDTO {
  /** @minLength 1 */
  firstName: string;
  /** @minLength 1 */
  lastName: string;
  /**
   * @minLength 1
   * @pattern ^\d{7}$
   */
  pwz: string;
  /**
   * @minLength 1
   * @pattern ^\d{9}$
   */
  phoneNumber: string;
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 6
   * @maxLength 2147483647
   */
  password: string;
  /** @minItems 1 */
  specializationIds: number[];
}

export interface LoginRequestDTO {
  /** @minLength 1 */
  login: string;
  /** @minLength 1 */
  password: string;
  facilityId: number;
}

export interface ConfirmRegistrationRequestDTO {
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 6
   * @maxLength 6
   */
  otp: string;
}

export interface ChangePasswordRequestDTO {
  /** @minLength 1 */
  oldPassword: string;
  /** @minLength 1 */
  newPassword: string;
}

export interface GenerateUploadUrlRequestDTO {
  fileSizeBytes: number;
  fileName: string;
  visitId?: number;
  additionalServiceId?: number;
}

export interface UploadUrlResponseDTO {
  uploadUrl: string;
  s3Key: string;
  attachmentId: number;
}

export interface CompleteUploadRequestDTO {
  attachmentId: number;
  s3Key: string;
}

export interface UpdateDoctorSpecializationsDTO {
  /** @minItems 1 */
  specializationIds: number[];
}

export interface TimeSlot {
  id?: number;
  visitId?: number;
  doctorId?: number;
  startTime?: string;
  endTime?: string;
  date?: string;
  busy?: boolean;
}

export interface DoctorDetailsDTO {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  specializations: Specialization[];
}

export interface MedicineWithAmount {
  id: string;
  name: string;
  commonName: string;
  dosage: string;
  amount: number;
}

export interface FacilityLoginReturnDTO {
  id: number;
  address: string;
  city: string;
}

export type AdditionalServiceStatus =
  (typeof AdditionalServiceStatus)[keyof typeof AdditionalServiceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdditionalServiceStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
} as const;

export interface AdditionalService {
  id?: number;
  description?: string;
  date?: string;
  fulfiller?: User;
  service?: Service;
  status?: AdditionalServiceStatus;
  attachments?: Attachment[];
}

export type AttachmentStatus = (typeof AttachmentStatus)[keyof typeof AttachmentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttachmentStatus = {
  PENDING: 'PENDING',
  UPLOADED: 'UPLOADED',
} as const;

export interface Attachment {
  id?: number;
  fileName?: string;
  s3Key?: string;
  status?: AttachmentStatus;
  visitId?: number;
  additionalServiceId?: number;
}

export interface Facility {
  id?: number;
  address?: string;
  city?: string;
  visits?: Visit[];
}

export interface Feedback {
  id?: number;
  rating?: number;
  text?: string;
  visit?: Visit;
}

export interface FreeDay {
  id?: number;
  date?: string;
  user?: User;
}

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationStatus = {
  QUEUED: 'QUEUED',
  SENT: 'SENT',
  ERROR: 'ERROR',
} as const;

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotificationType = {
  VISIT_TOMORROW: 'VISIT_TOMORROW',
  NEW_VISIT_INFO: 'NEW_VISIT_INFO',
} as const;

export interface Notification {
  id?: number;
  status?: NotificationStatus;
  visit?: Visit;
  additionalService?: AdditionalService;
  type?: NotificationType;
}

export type ReferralType = (typeof ReferralType)[keyof typeof ReferralType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferralType = {
  RTG: 'RTG',
} as const;

export interface Referral {
  id?: number;
  diagnosis?: string;
  type?: ReferralType;
  visit?: Visit;
  expirationDate?: string;
}

export interface Subscription {
  id?: number;
  name?: string;
  price?: number;
  users?: User[];
  subscriptionServices?: SubscriptionService[];
}

export interface SubscriptionService {
  [key: string]: unknown;
}

export type UserAccountStatus = (typeof UserAccountStatus)[keyof typeof UserAccountStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserAccountStatus = {
  ACTIVE: 'ACTIVE',
  PENDING_CONFIRMATION: 'PENDING_CONFIRMATION',
  DEACTIVATED: 'DEACTIVATED',
} as const;

export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface User {
  id: number;
  firstName: string;
  lastName: string;
  pesel?: string;
  passportNumber?: string;
  email: string;
  address?: string;
  password?: string;
  phoneNumber?: string;
  accountStatus: UserAccountStatus;
  birthDate?: string;
  pwzNumber?: string;
  emailNotifications: boolean;
  role: UserRole;
  subscription?: Subscription;
  specializations?: Specialization[];
  timeSlots?: TimeSlot[];
  workTimes?: WorkTime[];
  freeDays?: FreeDay[];
  additionalServices?: AdditionalService[];
}

export type VisitStatus = (typeof VisitStatus)[keyof typeof VisitStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VisitStatus = {
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED',
} as const;

export interface Visit {
  id?: number;
  status?: VisitStatus;
  interview?: string;
  diagnosis?: string;
  recommendations?: string;
  totalCost?: number;
  facilityId?: number;
  service?: Service;
  patientInformation?: string;
  patientId?: number;
  doctorId?: number;
  feedback?: Feedback;
  attachments?: Attachment[];
  prescriptions?: Prescription[];
  referrals?: Referral[];
  notifications?: Notification[];
}

export type MeDTORole = (typeof MeDTORole)[keyof typeof MeDTORole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MeDTORole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  WARD_CLERK: 'WARD_CLERK',
  ADMINISTRATOR: 'ADMINISTRATOR',
} as const;

export interface MeDTO {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  role: MeDTORole;
}

export type AddMedicineToPrescriptionParams = {
  amount?: number;
};

export type GetAllMedicinesParams = {
  /**
   * Maximum results to return
   */
  limit?: number;
};

export type SearchMedicinesParams = {
  /**
   * Search query
   */
  q: string;
  /**
   * Maximum results to return
   */
  limit?: number;
};
