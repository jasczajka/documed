/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { CreateReferralDTO, ReferralTypeDTO, ReturnReferralDTO } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary Create referral
 */
export const createReferral = (createReferralDTO: CreateReferralDTO, signal?: AbortSignal) => {
  return customInstance<ReturnReferralDTO>({
    url: `/api/referrals`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createReferralDTO,
    signal,
  });
};

export const getCreateReferralMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createReferral>>,
    TError,
    { data: CreateReferralDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createReferral>>,
  TError,
  { data: CreateReferralDTO },
  TContext
> => {
  const mutationKey = ['createReferral'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createReferral>>,
    { data: CreateReferralDTO }
  > = (props) => {
    const { data } = props ?? {};

    return createReferral(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateReferralMutationResult = NonNullable<Awaited<ReturnType<typeof createReferral>>>;
export type CreateReferralMutationBody = CreateReferralDTO;
export type CreateReferralMutationError = ErrorType<unknown>;

/**
 * @summary Create referral
 */
export const useCreateReferral = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createReferral>>,
      TError,
      { data: CreateReferralDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createReferral>>,
  TError,
  { data: CreateReferralDTO },
  TContext
> => {
  const mutationOptions = getCreateReferralMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get referral by id
 */
export const getReferralById = (referralId: number, signal?: AbortSignal) => {
  return customInstance<ReturnReferralDTO>({
    url: `/api/referrals/${referralId}`,
    method: 'GET',
    signal,
  });
};

export const getGetReferralByIdQueryKey = (referralId: number) => {
  return [`/api/referrals/${referralId}`] as const;
};

export const getGetReferralByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getReferralById>>,
  TError = ErrorType<unknown>,
>(
  referralId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferralById>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetReferralByIdQueryKey(referralId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferralById>>> = ({ signal }) =>
    getReferralById(referralId, signal);

  return { queryKey, queryFn, enabled: !!referralId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReferralById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReferralByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getReferralById>>>;
export type GetReferralByIdQueryError = ErrorType<unknown>;

export function useGetReferralById<
  TData = Awaited<ReturnType<typeof getReferralById>>,
  TError = ErrorType<unknown>,
>(
  referralId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferralById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferralById>>,
          TError,
          Awaited<ReturnType<typeof getReferralById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReferralById<
  TData = Awaited<ReturnType<typeof getReferralById>>,
  TError = ErrorType<unknown>,
>(
  referralId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferralById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferralById>>,
          TError,
          Awaited<ReturnType<typeof getReferralById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReferralById<
  TData = Awaited<ReturnType<typeof getReferralById>>,
  TError = ErrorType<unknown>,
>(
  referralId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferralById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get referral by id
 */

export function useGetReferralById<
  TData = Awaited<ReturnType<typeof getReferralById>>,
  TError = ErrorType<unknown>,
>(
  referralId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferralById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetReferralByIdQueryOptions(referralId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Remove referral
 */
export const removeReferral = (referralId: number) => {
  return customInstance<number>({ url: `/api/referrals/${referralId}`, method: 'DELETE' });
};

export const getRemoveReferralMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeReferral>>,
    TError,
    { referralId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeReferral>>,
  TError,
  { referralId: number },
  TContext
> => {
  const mutationKey = ['removeReferral'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeReferral>>,
    { referralId: number }
  > = (props) => {
    const { referralId } = props ?? {};

    return removeReferral(referralId);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveReferralMutationResult = NonNullable<Awaited<ReturnType<typeof removeReferral>>>;

export type RemoveReferralMutationError = ErrorType<unknown>;

/**
 * @summary Remove referral
 */
export const useRemoveReferral = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeReferral>>,
      TError,
      { referralId: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeReferral>>,
  TError,
  { referralId: number },
  TContext
> => {
  const mutationOptions = getRemoveReferralMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all referrals for visit
 */
export const getAllReferralsForVisit = (visitId: number, signal?: AbortSignal) => {
  return customInstance<ReturnReferralDTO[]>({
    url: `/api/referrals/visit/${visitId}`,
    method: 'GET',
    signal,
  });
};

export const getGetAllReferralsForVisitQueryKey = (visitId: number) => {
  return [`/api/referrals/visit/${visitId}`] as const;
};

export const getGetAllReferralsForVisitQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllReferralsForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForVisit>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllReferralsForVisitQueryKey(visitId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllReferralsForVisit>>> = ({
    signal,
  }) => getAllReferralsForVisit(visitId, signal);

  return { queryKey, queryFn, enabled: !!visitId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllReferralsForVisit>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllReferralsForVisitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllReferralsForVisit>>
>;
export type GetAllReferralsForVisitQueryError = ErrorType<unknown>;

export function useGetAllReferralsForVisit<
  TData = Awaited<ReturnType<typeof getAllReferralsForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForVisit>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllReferralsForVisit>>,
          TError,
          Awaited<ReturnType<typeof getAllReferralsForVisit>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllReferralsForVisit<
  TData = Awaited<ReturnType<typeof getAllReferralsForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForVisit>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllReferralsForVisit>>,
          TError,
          Awaited<ReturnType<typeof getAllReferralsForVisit>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllReferralsForVisit<
  TData = Awaited<ReturnType<typeof getAllReferralsForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForVisit>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all referrals for visit
 */

export function useGetAllReferralsForVisit<
  TData = Awaited<ReturnType<typeof getAllReferralsForVisit>>,
  TError = ErrorType<unknown>,
>(
  visitId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForVisit>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllReferralsForVisitQueryOptions(visitId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all referral types
 */
export const getAllReferralTypes = (signal?: AbortSignal) => {
  return customInstance<ReferralTypeDTO[]>({ url: `/api/referrals/types`, method: 'GET', signal });
};

export const getGetAllReferralTypesQueryKey = () => {
  return [`/api/referrals/types`] as const;
};

export const getGetAllReferralTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllReferralTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllReferralTypes>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllReferralTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllReferralTypes>>> = ({ signal }) =>
    getAllReferralTypes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllReferralTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllReferralTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllReferralTypes>>
>;
export type GetAllReferralTypesQueryError = ErrorType<unknown>;

export function useGetAllReferralTypes<
  TData = Awaited<ReturnType<typeof getAllReferralTypes>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralTypes>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllReferralTypes>>,
          TError,
          Awaited<ReturnType<typeof getAllReferralTypes>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllReferralTypes<
  TData = Awaited<ReturnType<typeof getAllReferralTypes>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralTypes>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllReferralTypes>>,
          TError,
          Awaited<ReturnType<typeof getAllReferralTypes>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllReferralTypes<
  TData = Awaited<ReturnType<typeof getAllReferralTypes>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralTypes>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all referral types
 */

export function useGetAllReferralTypes<
  TData = Awaited<ReturnType<typeof getAllReferralTypes>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralTypes>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllReferralTypesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all referrals for patient
 */
export const getAllReferralsForPatient = (userId: number, signal?: AbortSignal) => {
  return customInstance<ReturnReferralDTO[]>({
    url: `/api/referrals/patient/${userId}`,
    method: 'GET',
    signal,
  });
};

export const getGetAllReferralsForPatientQueryKey = (userId: number) => {
  return [`/api/referrals/patient/${userId}`] as const;
};

export const getGetAllReferralsForPatientQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllReferralsForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForPatient>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllReferralsForPatientQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllReferralsForPatient>>> = ({
    signal,
  }) => getAllReferralsForPatient(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllReferralsForPatient>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllReferralsForPatientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllReferralsForPatient>>
>;
export type GetAllReferralsForPatientQueryError = ErrorType<unknown>;

export function useGetAllReferralsForPatient<
  TData = Awaited<ReturnType<typeof getAllReferralsForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForPatient>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllReferralsForPatient>>,
          TError,
          Awaited<ReturnType<typeof getAllReferralsForPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllReferralsForPatient<
  TData = Awaited<ReturnType<typeof getAllReferralsForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForPatient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllReferralsForPatient>>,
          TError,
          Awaited<ReturnType<typeof getAllReferralsForPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAllReferralsForPatient<
  TData = Awaited<ReturnType<typeof getAllReferralsForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForPatient>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all referrals for patient
 */

export function useGetAllReferralsForPatient<
  TData = Awaited<ReturnType<typeof getAllReferralsForPatient>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllReferralsForPatient>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAllReferralsForPatientQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
