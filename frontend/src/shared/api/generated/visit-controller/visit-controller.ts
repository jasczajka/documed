/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { ScheduleVisitDTO, UpdateVisitDTO, Visit } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary schedule/create visit
 */
export const scheduleVisit = (scheduleVisitDTO: ScheduleVisitDTO, signal?: AbortSignal) => {
  return customInstance<Visit>({
    url: `/api/visits`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: scheduleVisitDTO,
    signal,
  });
};

export const getScheduleVisitMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleVisit>>,
    TError,
    { data: ScheduleVisitDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleVisit>>,
  TError,
  { data: ScheduleVisitDTO },
  TContext
> => {
  const mutationKey = ['scheduleVisit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleVisit>>,
    { data: ScheduleVisitDTO }
  > = (props) => {
    const { data } = props ?? {};

    return scheduleVisit(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleVisitMutationResult = NonNullable<Awaited<ReturnType<typeof scheduleVisit>>>;
export type ScheduleVisitMutationBody = ScheduleVisitDTO;
export type ScheduleVisitMutationError = ErrorType<unknown>;

/**
 * @summary schedule/create visit
 */
export const useScheduleVisit = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scheduleVisit>>,
      TError,
      { data: ScheduleVisitDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scheduleVisit>>,
  TError,
  { data: ScheduleVisitDTO },
  TContext
> => {
  const mutationOptions = getScheduleVisitMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get visit by id
 */
export const getVisitById = (id: number, signal?: AbortSignal) => {
  return customInstance<Visit>({ url: `/api/visits/${id}`, method: 'GET', signal });
};

export const getGetVisitByIdQueryKey = (id: number) => {
  return [`/api/visits/${id}`] as const;
};

export const getGetVisitByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getVisitById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVisitById>>, TError, TData>>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVisitByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVisitById>>> = ({ signal }) =>
    getVisitById(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVisitById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVisitByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getVisitById>>>;
export type GetVisitByIdQueryError = ErrorType<unknown>;

export function useGetVisitById<
  TData = Awaited<ReturnType<typeof getVisitById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVisitById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitById>>,
          TError,
          Awaited<ReturnType<typeof getVisitById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitById<
  TData = Awaited<ReturnType<typeof getVisitById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVisitById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitById>>,
          TError,
          Awaited<ReturnType<typeof getVisitById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitById<
  TData = Awaited<ReturnType<typeof getVisitById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVisitById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get visit by id
 */

export function useGetVisitById<
  TData = Awaited<ReturnType<typeof getVisitById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVisitById>>, TError, TData>>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVisitByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary update visit data
 */
export const updateVisit = (id: number, updateVisitDTO: UpdateVisitDTO) => {
  return customInstance<Visit>({
    url: `/api/visits/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateVisitDTO,
  });
};

export const getUpdateVisitMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateVisit>>,
    TError,
    { id: number; data: UpdateVisitDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateVisit>>,
  TError,
  { id: number; data: UpdateVisitDTO },
  TContext
> => {
  const mutationKey = ['updateVisit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateVisit>>,
    { id: number; data: UpdateVisitDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateVisit(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateVisitMutationResult = NonNullable<Awaited<ReturnType<typeof updateVisit>>>;
export type UpdateVisitMutationBody = UpdateVisitDTO;
export type UpdateVisitMutationError = ErrorType<unknown>;

/**
 * @summary update visit data
 */
export const useUpdateVisit = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateVisit>>,
      TError,
      { id: number; data: UpdateVisitDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateVisit>>,
  TError,
  { id: number; data: UpdateVisitDTO },
  TContext
> => {
  const mutationOptions = getUpdateVisitMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary start visit
 */
export const startVisit = (id: number) => {
  return customInstance<Visit>({ url: `/api/visits/${id}/start`, method: 'PATCH' });
};

export const getStartVisitMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof startVisit>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof startVisit>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['startVisit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof startVisit>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return startVisit(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type StartVisitMutationResult = NonNullable<Awaited<ReturnType<typeof startVisit>>>;

export type StartVisitMutationError = ErrorType<unknown>;

/**
 * @summary start visit
 */
export const useStartVisit = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof startVisit>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof startVisit>>, TError, { id: number }, TContext> => {
  const mutationOptions = getStartVisitMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary finish visit
 */
export const finishVisit = (id: number, updateVisitDTO: UpdateVisitDTO) => {
  return customInstance<string>({
    url: `/api/visits/${id}/close`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateVisitDTO,
  });
};

export const getFinishVisitMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof finishVisit>>,
    TError,
    { id: number; data: UpdateVisitDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof finishVisit>>,
  TError,
  { id: number; data: UpdateVisitDTO },
  TContext
> => {
  const mutationKey = ['finishVisit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof finishVisit>>,
    { id: number; data: UpdateVisitDTO }
  > = (props) => {
    const { id, data } = props ?? {};

    return finishVisit(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FinishVisitMutationResult = NonNullable<Awaited<ReturnType<typeof finishVisit>>>;
export type FinishVisitMutationBody = UpdateVisitDTO;
export type FinishVisitMutationError = ErrorType<unknown>;

/**
 * @summary finish visit
 */
export const useFinishVisit = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof finishVisit>>,
      TError,
      { id: number; data: UpdateVisitDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof finishVisit>>,
  TError,
  { id: number; data: UpdateVisitDTO },
  TContext
> => {
  const mutationOptions = getFinishVisitMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary cancel visit
 */
export const cancelPlannedVisit = (id: number) => {
  return customInstance<string>({ url: `/api/visits/${id}/cancel`, method: 'PATCH' });
};

export const getCancelPlannedVisitMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelPlannedVisit>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelPlannedVisit>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['cancelPlannedVisit'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelPlannedVisit>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return cancelPlannedVisit(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelPlannedVisitMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelPlannedVisit>>
>;

export type CancelPlannedVisitMutationError = ErrorType<unknown>;

/**
 * @summary cancel visit
 */
export const useCancelPlannedVisit = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof cancelPlannedVisit>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof cancelPlannedVisit>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getCancelPlannedVisitMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary get all visits for logged in patient
 */
export const getVisitsForCurrentPatient = (signal?: AbortSignal) => {
  return customInstance<Visit[]>({ url: `/api/visits/patient`, method: 'GET', signal });
};

export const getGetVisitsForCurrentPatientQueryKey = () => {
  return [`/api/visits/patient`] as const;
};

export const getGetVisitsForCurrentPatientQueryOptions = <
  TData = Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentPatient>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVisitsForCurrentPatientQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVisitsForCurrentPatient>>> = ({
    signal,
  }) => getVisitsForCurrentPatient(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVisitsForCurrentPatientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVisitsForCurrentPatient>>
>;
export type GetVisitsForCurrentPatientQueryError = ErrorType<unknown>;

export function useGetVisitsForCurrentPatient<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentPatient>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
          TError,
          Awaited<ReturnType<typeof getVisitsForCurrentPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsForCurrentPatient<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentPatient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
          TError,
          Awaited<ReturnType<typeof getVisitsForCurrentPatient>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsForCurrentPatient<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentPatient>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary get all visits for logged in patient
 */

export function useGetVisitsForCurrentPatient<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentPatient>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentPatient>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVisitsForCurrentPatientQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get all visits for selected patient
 */
export const getVisitsByPatientId = (id: number, signal?: AbortSignal) => {
  return customInstance<Visit[]>({ url: `/api/visits/patient/${id}`, method: 'GET', signal });
};

export const getGetVisitsByPatientIdQueryKey = (id: number) => {
  return [`/api/visits/patient/${id}`] as const;
};

export const getGetVisitsByPatientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getVisitsByPatientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByPatientId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVisitsByPatientIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVisitsByPatientId>>> = ({ signal }) =>
    getVisitsByPatientId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVisitsByPatientId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVisitsByPatientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVisitsByPatientId>>
>;
export type GetVisitsByPatientIdQueryError = ErrorType<unknown>;

export function useGetVisitsByPatientId<
  TData = Awaited<ReturnType<typeof getVisitsByPatientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByPatientId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsByPatientId>>,
          TError,
          Awaited<ReturnType<typeof getVisitsByPatientId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsByPatientId<
  TData = Awaited<ReturnType<typeof getVisitsByPatientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByPatientId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsByPatientId>>,
          TError,
          Awaited<ReturnType<typeof getVisitsByPatientId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsByPatientId<
  TData = Awaited<ReturnType<typeof getVisitsByPatientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByPatientId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary get all visits for selected patient
 */

export function useGetVisitsByPatientId<
  TData = Awaited<ReturnType<typeof getVisitsByPatientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByPatientId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVisitsByPatientIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get all visits assigned for logged in doctor
 */
export const getVisitsForCurrentDoctor = (signal?: AbortSignal) => {
  return customInstance<Visit[]>({ url: `/api/visits/doctor`, method: 'GET', signal });
};

export const getGetVisitsForCurrentDoctorQueryKey = () => {
  return [`/api/visits/doctor`] as const;
};

export const getGetVisitsForCurrentDoctorQueryOptions = <
  TData = Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVisitsForCurrentDoctorQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>> = ({
    signal,
  }) => getVisitsForCurrentDoctor(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVisitsForCurrentDoctorQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>
>;
export type GetVisitsForCurrentDoctorQueryError = ErrorType<unknown>;

export function useGetVisitsForCurrentDoctor<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
          TError,
          Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsForCurrentDoctor<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
          TError,
          Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsForCurrentDoctor<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary get all visits assigned for logged in doctor
 */

export function useGetVisitsForCurrentDoctor<
  TData = Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsForCurrentDoctor>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVisitsForCurrentDoctorQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary get all visits assigned for selected doctor
 */
export const getVisitsByDoctorId = (id: number, signal?: AbortSignal) => {
  return customInstance<Visit[]>({ url: `/api/visits/doctor/${id}`, method: 'GET', signal });
};

export const getGetVisitsByDoctorIdQueryKey = (id: number) => {
  return [`/api/visits/doctor/${id}`] as const;
};

export const getGetVisitsByDoctorIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getVisitsByDoctorId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByDoctorId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVisitsByDoctorIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVisitsByDoctorId>>> = ({ signal }) =>
    getVisitsByDoctorId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVisitsByDoctorId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVisitsByDoctorIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getVisitsByDoctorId>>
>;
export type GetVisitsByDoctorIdQueryError = ErrorType<unknown>;

export function useGetVisitsByDoctorId<
  TData = Awaited<ReturnType<typeof getVisitsByDoctorId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByDoctorId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsByDoctorId>>,
          TError,
          Awaited<ReturnType<typeof getVisitsByDoctorId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsByDoctorId<
  TData = Awaited<ReturnType<typeof getVisitsByDoctorId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByDoctorId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVisitsByDoctorId>>,
          TError,
          Awaited<ReturnType<typeof getVisitsByDoctorId>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVisitsByDoctorId<
  TData = Awaited<ReturnType<typeof getVisitsByDoctorId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByDoctorId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary get all visits assigned for selected doctor
 */

export function useGetVisitsByDoctorId<
  TData = Awaited<ReturnType<typeof getVisitsByDoctorId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getVisitsByDoctorId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVisitsByDoctorIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
