/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { WorkTime, WorkTimeDTO } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

/**
 * @summary Get all worktimes for user
 */
export const getWorkTimesForUser = (userId: number, signal?: AbortSignal) => {
  return customInstance<WorkTime[]>({ url: `/api/worktime/${userId}`, method: 'GET', signal });
};

export const getGetWorkTimesForUserQueryKey = (userId: number) => {
  return [`/api/worktime/${userId}`] as const;
};

export const getGetWorkTimesForUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkTimesForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkTimesForUser>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorkTimesForUserQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkTimesForUser>>> = ({ signal }) =>
    getWorkTimesForUser(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkTimesForUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorkTimesForUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkTimesForUser>>
>;
export type GetWorkTimesForUserQueryError = ErrorType<unknown>;

export function useGetWorkTimesForUser<
  TData = Awaited<ReturnType<typeof getWorkTimesForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkTimesForUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkTimesForUser>>,
          TError,
          Awaited<ReturnType<typeof getWorkTimesForUser>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorkTimesForUser<
  TData = Awaited<ReturnType<typeof getWorkTimesForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkTimesForUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkTimesForUser>>,
          TError,
          Awaited<ReturnType<typeof getWorkTimesForUser>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorkTimesForUser<
  TData = Awaited<ReturnType<typeof getWorkTimesForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkTimesForUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get all worktimes for user
 */

export function useGetWorkTimesForUser<
  TData = Awaited<ReturnType<typeof getWorkTimesForUser>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkTimesForUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorkTimesForUserQueryOptions(userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update worktimes for user
 */
export const updateWorkTimesForUser = (userId: number, workTimeDTO: WorkTimeDTO[]) => {
  return customInstance<WorkTime[]>({
    url: `/api/worktime/${userId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: workTimeDTO,
  });
};

export const getUpdateWorkTimesForUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWorkTimesForUser>>,
    TError,
    { userId: number; data: WorkTimeDTO[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWorkTimesForUser>>,
  TError,
  { userId: number; data: WorkTimeDTO[] },
  TContext
> => {
  const mutationKey = ['updateWorkTimesForUser'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWorkTimesForUser>>,
    { userId: number; data: WorkTimeDTO[] }
  > = (props) => {
    const { userId, data } = props ?? {};

    return updateWorkTimesForUser(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWorkTimesForUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWorkTimesForUser>>
>;
export type UpdateWorkTimesForUserMutationBody = WorkTimeDTO[];
export type UpdateWorkTimesForUserMutationError = ErrorType<unknown>;

/**
 * @summary Update worktimes for user
 */
export const useUpdateWorkTimesForUser = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateWorkTimesForUser>>,
      TError,
      { userId: number; data: WorkTimeDTO[] },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateWorkTimesForUser>>,
  TError,
  { userId: number; data: WorkTimeDTO[] },
  TContext
> => {
  const mutationOptions = getUpdateWorkTimesForUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Create worktime for user
 */
export const createWorkTime = (userId: number, workTimeDTO: WorkTimeDTO, signal?: AbortSignal) => {
  return customInstance<WorkTime>({
    url: `/api/worktime/${userId}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: workTimeDTO,
    signal,
  });
};

export const getCreateWorkTimeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkTime>>,
    TError,
    { userId: number; data: WorkTimeDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorkTime>>,
  TError,
  { userId: number; data: WorkTimeDTO },
  TContext
> => {
  const mutationKey = ['createWorkTime'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorkTime>>,
    { userId: number; data: WorkTimeDTO }
  > = (props) => {
    const { userId, data } = props ?? {};

    return createWorkTime(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWorkTimeMutationResult = NonNullable<Awaited<ReturnType<typeof createWorkTime>>>;
export type CreateWorkTimeMutationBody = WorkTimeDTO;
export type CreateWorkTimeMutationError = ErrorType<unknown>;

/**
 * @summary Create worktime for user
 */
export const useCreateWorkTime = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createWorkTime>>,
      TError,
      { userId: number; data: WorkTimeDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createWorkTime>>,
  TError,
  { userId: number; data: WorkTimeDTO },
  TContext
> => {
  const mutationOptions = getCreateWorkTimeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
