/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';
import { useMutation } from '@tanstack/react-query';

import type { WorkTime, WorkTimeDTO } from '../generated.schemas';

import type { ErrorType } from '../../axios-instance';
import { customInstance } from '../../axios-instance';

export const createWorkTime = (userId: number, workTimeDTO: WorkTimeDTO, signal?: AbortSignal) => {
  return customInstance<WorkTime>({
    url: `/api/worktime/${userId}`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: workTimeDTO,
    signal,
  });
};

export const getCreateWorkTimeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkTime>>,
    TError,
    { userId: number; data: WorkTimeDTO },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorkTime>>,
  TError,
  { userId: number; data: WorkTimeDTO },
  TContext
> => {
  const mutationKey = ['createWorkTime'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorkTime>>,
    { userId: number; data: WorkTimeDTO }
  > = (props) => {
    const { userId, data } = props ?? {};

    return createWorkTime(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWorkTimeMutationResult = NonNullable<Awaited<ReturnType<typeof createWorkTime>>>;
export type CreateWorkTimeMutationBody = WorkTimeDTO;
export type CreateWorkTimeMutationError = ErrorType<unknown>;

export const useCreateWorkTime = <TError = ErrorType<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createWorkTime>>,
      TError,
      { userId: number; data: WorkTimeDTO },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createWorkTime>>,
  TError,
  { userId: number; data: WorkTimeDTO },
  TContext
> => {
  const mutationOptions = getCreateWorkTimeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
